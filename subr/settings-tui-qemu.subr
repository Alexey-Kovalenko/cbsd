# QEMU-related TUI function
if [ ! "$_CBSD_SETTINGS_TUI_QEMU_SUBR" ]; then
_CBSD_SETTINGS_TUI_QEMU_SUBR=1
###

# qemu form for qemu vnc options
get_construct_qemu_vnc_options_menu()
{
	local _input _res item_let=A

	local title="VNC Options"
	local defaultitem=
	local menu_choice=
	local _checkbox="vnc_enabled"
	local _qemu_vnc_tcp_bind

	f_dialog_default_fetch defaultitem

	readconf vnc.conf
	if [ -z "${vnc_enabled}" ]; then
		vnc_enabled="${vnc_default}"
	fi

	[ -z "${qemu_vnc_resolution}" ] && qemu_vnc_resolution="${default_vnc_width}x${default_vnc_height}"
	[ -z "${qemu_vnc_tcp_bind}" ] && qemu_vnc_tcp_bind="${default_vnc_tcp_bind}"
	[ -z "${qemu_vnc_vgaconf}" ] && qemu_vnc_vgaconf="${default_vnc_vgaconf}"

	if [ "${vnc_password}" = "0" ]; then
		unset vnc_password
	else
		[ -z "${vnc_password}" ] && vnc_password="${default_vnc_password}"
	fi

	# checkbox mark
	for i in ${_checkbox}; do
		eval _mytest=\$$i
		if [ "${_mytest}" = "1" ]; then
			export ${i}_mark="X"
		else
			export ${i}_mark=" "
		fi
	done

	local menu_list=""

	# remove IPv6 brackets []
	_qemu_vnc_tcp_bind=$( echo ${qemu_vnc_tcp_bind} | ${TR_CMD} -d '[]' )

	menu_list="${menu_list} '${item_let} vnc_enabled'		'[${vnc_enabled_mark}]'		'Enable VNC protocol instead of SPICE'"
	inc_menu_index item_let
	menu_list="${menu_list} '${item_let} qemu_vnc_tcp_bind'		'[${_qemu_vnc_tcp_bind}]'	'Default: ${default_vnc_tcp_bind}'"
	inc_menu_index item_let
	menu_list="${menu_list} '${item_let} vnc_password'		'[${vnc_password}]'		'Default: see vnc.conf file'"

	menu_list="${menu_list} 'Save'	'Save changes and quit'	'Save!'"

	cbsd_menubox
	retval=$?

	f_dialog_data_sanitize menu_choice
	f_dialog_menutag_store "$menu_choice"
	f_dialog_default_store "$menu_choice"

	return $retval
}

# qemu form for qemu spice options
get_construct_qemu_spice_options_menu()
{
	local _input _res item_let=A

	local title="SPICE Options"
	local defaultitem=
	local menu_choice=
	local _checkbox="spice_enabled"
	local _qemu_spice_tcp_bind

	f_dialog_default_fetch defaultitem

	readconf spice.conf

	[ -z "${spice_default}" ] && spice_default="${default_spice_default}"

	if [ -z "${spice_enabled}" ]; then
		spice_enabled="${spice_default}"
	fi

	[ -z "${qemu_spice_resolution}" ] && qemu_spice_resolution="${default_spice_width}x${default_spice_height}"
	[ -z "${qemu_spice_tcp_bind}" ] && qemu_spice_tcp_bind="${default_spice_tcp_bind}"

	if [ "${spice_password}" = "0" ]; then
		unset spice_password
	else
		[ -z "${spice_password}" ] && spice_password="${default_spice_password}"
	fi

	# checkbox mark
	for i in ${_checkbox}; do
		eval _mytest=\$$i
		if [ "${_mytest}" = "1" ]; then
			export ${i}_mark="X"
		else
			export ${i}_mark=" "
		fi
	done

	local menu_list=""

	# remove IPv6 brackets []
	_qemu_spice_tcp_bind=$( echo ${qemu_spice_tcp_bind} | ${TR_CMD} -d '[]' )

	menu_list="${menu_list} '${item_let} spice_enabled'		'[${spice_enabled_mark}]'		'Enable SPICE protocol instead of VNC'"
	inc_menu_index item_let
	menu_list="${menu_list} '${item_let} qemu_spice_tcp_bind'	'[${_qemu_spice_tcp_bind}]'	'Default: ${default_spice_tcp_bind}'"
	inc_menu_index item_let
	menu_list="${menu_list} '${item_let} spice_password'		'[${spice_password}]'		'Default: see spice.conf file'"

	menu_list="${menu_list} 'Save'	'Save changes and quit'	'Save!'"

	cbsd_menubox
	retval=$?

	f_dialog_data_sanitize menu_choice
	f_dialog_menutag_store "${menu_choice}"
	f_dialog_default_store "${menu_choice}"

	return ${retval}
}



# qemu form for qemu vnc options
get_construct_qemu_vnc_options()
{
	local mychoice index
	local old_defaultitem="${mtag}"

	while [ 1 ]; do
		get_construct_qemu_vnc_options_menu || break

		index=${mtag%% *}
		mychoice=${mtag##* }

		case "${mychoice}" in
			"-")
				continue
				;;
			"Save")
				break
				;;
			qemu_vnc_tcp_bind)
				title=" vnc bind "
				prompt="System default via vnc.conf: ${default_vnc_tcp_bind}\n\nTo bind on all IPv4 addresses please use:\n 0.0.0.0\nTo bind on all IPv6 addresses please use: \n [::]\nOr by single IP, for example:\n 10.0.0.2 or fde4:8dba:82e1::2\nEnter valid IP"

				case "${node_ip6_active}" in
					1)
						if [ "${node_ip4_active}" = "0" ]; then
							defaultitem="[::1]"
						else
							defaultitem="${qemu_vnc_tcp_bind}"
						fi
						;;
					*)
						defaultitem="${qemu_vnc_tcp_bind}"
						;;
				esac

				if cbsd_inputbox_simple; then
					iptype ${mtag}
					_ret=$?
					case ${_ret} in
						1)
							# valid IPv4
							;;
						2)
							# valid IPv6, check for brackets
							_ret=$( substr --pos=0 --len=1 --str=${mtag} )
							if [ "${_ret}" != "[" ]; then
								# add IPv6 brackets
								mtag="[${mtag}]"
							fi
							;;
						3)
							# invalid IP
							;;
					esac
					qemu_vnc_tcp_bind="${mtag}"
				fi
				;;
			qemu_vnc_resolution)
				get_construct_qemu_vnc_resulution_menu
				;;
			qemu_vnc_vgaconf)
				get_construct_qemu_vnc_vgaconf_menu
				;;
			vnc_password)
				get_construct_vnc_password
				;;
			vnc_enabled)
				# set/invert spice_enabled by old vnc_enabled values
				# since these are mutually exclusive options
				spice_enabled="${vnc_enabled}"
				invert_checkbox ${mychoice}
				if [ "${vnc_enabled}" = "1" ]; then
					spice_default="0"
				else
					spice_default="1"
				fi
				continue
				;;
			*)
				invert_checkbox ${mychoice}
				continue
				;;
		esac
	done

	f_dialog_default_store "${old_defaultitem}"
}

# qemu form for qemu spice options
get_construct_qemu_spice_options()
{
	local mychoice index
	local old_defaultitem="${mtag}"

	while [ 1 ]; do
		get_construct_qemu_spice_options_menu || break

		index=${mtag%% *}
		mychoice=${mtag##* }

		case "${mychoice}" in
			"-")
				continue
				;;
			"Save")
				break
				;;
			qemu_spice_tcp_bind)
				title=" SPICE bind "
				prompt="default via spice.conf: ${default_spice_tcp_bind}\nUse 0.0.0.0 for all IPs"
				defaultitem="${qemu_spice_tcp_bind}"
				cbsd_inputbox_simple && qemu_spice_tcp_bind="${mtag}"
				;;
			qemu_spice_resolution)
				get_construct_qemu_spice_resulution_menu
				;;
			spice_password)
				get_construct_spice_password
				;;
			spice_enabled)
				# set/invert vnc_enabled by old spice_enabled values
				# since these are mutually exclusive options
				vnc_enabled="${spice_enabled}"
				invert_checkbox ${mychoice}
				spice_default="${spice_enabled}"
				continue
				;;
			*)
				invert_checkbox ${mychoice}
				continue
				;;
		esac
	done

	f_dialog_default_store "${old_defaultitem}"
}

# qemu form for submenu for qemu audio options
get_construct_qemu_audio_options()
{
	local mychoice index
	local old_defaultitem="${mtag}"

	while [ 1 ]; do
		get_construct_audio_options_menu || break

		index=${mtag%% *}
		mychoice=${mtag##* }

		case "${mychoice}" in
			"-")
				continue
				;;
			"Save")
				break
				;;
			soundhw)
				get_construct_soundhw -c "ac97 adlib cs4231a es1370 gus hda pcspk sb16"
				;;
		esac
	done

	f_dialog_default_store "${old_defaultitem}"
}

# qemu form for qemu options
get_construct_qemu_options_menu()
{
	local _input _res item_let=A

	local title="Additional qemu arguments"
	local defaultitem=
	local menu_choice=
	local _checkbox="qemu_hap qemu_nestedhvm"

	f_dialog_default_fetch defaultitem

	# checkbox mark
	for i in ${_checkbox}; do
		eval _mytest=\$$i
		if [ "${_mytest}" = "1" ]; then
			export ${i}_mark="X"
		else
			export ${i}_mark=" "
		fi
	done

	local menu_list=""

	menu_list="${menu_list} '${item_let} qemu_hap'					'[${qemu_hap_mark}]'		'hardware assisted paging (enabled - recommended)'"
	inc_menu_index item_let
	menu_list="${menu_list} '${item_let} qemu_nestedhvm'				'[${qemu_nestedhvm_mark}]'	'Enable nested virtualization'"
	inc_menu_index item_let

	menu_list="${menu_list} 'Save'	'Save changes and quit'	'Save!'"

	cbsd_menubox
	retval=$?

	f_dialog_data_sanitize menu_choice
	f_dialog_menutag_store "$menu_choice"
	f_dialog_default_store "$menu_choice"

	return $retval
}

# qemu form for qemu options
get_construct_qemu_options()
{
	local mychoice index
	local old_defaultitem="${mtag}"

	while [ 1 ]; do
		get_construct_qemu_options_menu || break

		index=${mtag%% *}
		mychoice=${mtag##* }

		case "${mychoice}" in
		"-")
			continue
			;;
		"Save")
			break
			;;
		*)
			invert_checkbox ${mychoice}
			continue
			;;
		esac
	done

	f_dialog_default_store "${old_defaultitem}"
}


# virtual part for qemu jconf
make_qemu_part()
{
	local i _val

	if [ -n "${alt_iso}" ]; then
		iso_site=
		iso_img=
		iso_img_type=
		register_iso_name=
		register_iso_as="${alt_iso}";		# vm_os_path
	fi


${CAT_CMD} >> ${TMPFILE} << EOF
# Xen minimal configuration:
emulator="qemu";
# first disk size
imgsize="${imgsize}";
# number of vcpu
vm_cpus="${vm_cpus}";
# ram amount
vm_ram="${vm_ram}";
# profile os type
vm_os_type="${vm_os_type}";
# vm defaults/setting profile
vm_os_profile="${vm_os_profile}";
# end of Xen minimal configuration

# disk type - md or zvol
imgtype="${imgtype}";
# efi boot?
vm_efi="${vm_efi}";
# source site's for iso
iso_site="${iso_site}";
# iso image filename
iso_img="${iso_img}";
# iso image type?
iso_img_type="${iso_img_type}";
# register ISO as name
register_iso_name="${register_iso_name}"
# register ISO as
register_iso_as="${register_iso_as}"

virtio_type="${virtio_type}";
gw4="${gw4}";

jprofile="${jprofile}";
swapsize="${swapsize}";
vm_iso_path="${register_iso_as}";
vm_guestfs="${vm_guestfs}";
vm_vnc_port="${vm_vnc_port}";

cd_vnc_wait="${cd_vnc_wait}";
qemu_vnc_resolution="${qemu_vnc_resolution}";
qemu_vnc_tcp_bind="${qemu_vnc_tcp_bind}";
vnc_password='${vnc_password}';

with_img_helpers="";
runasap="${runasap}";
nic_driver="${nic_driver}";

spice_default="${spice_default}";
qemu_spice_resolution="${qemu_spice_resolution}";
qemu_spice_tcp_bind="${qemu_spice_tcp_bind}";
spice_password='${spice_password}';

on_poweroff="${on_poweroff}";
on_reboot="${on_reboot}";
on_crash="${on_crash}";

# is cloud image?
is_cloud='${is_cloud}';
# default disk sectorsize
sectorsize='${sectorsize}'

soundhw="${soundhw}";

qemu_hap="${qemu_hap}";
qemu_nestedhvm="${qemu_nestedhvm}";
# L1 config
# cpuid = ['0x1:ecx=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx']

EOF

	[ ${is_cloud} -eq 0 ] && return 0
	# todo: make is generic make_cloud_init_part()
${CAT_CMD} >> ${TMPFILE} << EOF
# cloud-init settings
ci_jname='${ci_jname}';
ci_fqdn='${ci_fqdn}';
ci_template='${ci_template}';
# first cloud-init iface = interface
ci_interface='${interface}';
ci_interface_name='${ci_interface_name}';
ci_interface_mtu='${ci_interface_mtu}';
ci_interface2='${ci_interface2}';
ci_interface_mtu2='${ci_interface_mtu2}';
ci_ip4_addr='${ci_ip4_addr}';
ci_gw4='${ci_gw4}';
ci_ip4_addr2='${ci_ip4_addr2}';
ci_gw42='${ci_gw42}';
ci_nameserver_address='${ci_nameserver_address}';
ci_nameserver_search='${ci_nameserver_search}';
ci_adjust_inteface_helper='${ci_adjust_inteface_helper}';
ci_user_add='${ci_user_add}';
ci_user_pw_user='${ci_user_pw_user}';
ci_user_pw_root='${ci_user_pw_root}';
EOF

for i in ${ci_user_add}; do
	for _par in gecos home shell member_groups pubkey; do
		_val=
		eval _val="\$ci_user_${_par}_${i}"
		${CAT_CMD} >> ${TMPFILE} << EOF
ci_user_${_par}_${i}='${_val}';
EOF
	done
done


}

###
fi
