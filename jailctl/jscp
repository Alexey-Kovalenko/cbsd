#!/usr/local/bin/cbsd
#v12.1.12
CBSDMODULE="jail"
MYARG=""
MYOPTARG="verbose"
MYDESC="get put file to remove nodes"
ADDHELP="[verbose=1] jail1:remotefile1 localfile1 [ localfile2 jail2@:remotefile2 ]\n\
verbose=1 for debug information\n"
EXTHELP="wf_jscp"

# ToDo:
# Instead of this need one jscp daemon/services with one lock and which will work on AMQP queue
# where executing
#     % cbsd jscp XXX YYY
# just add job to queue

. ${subr}
. ${tools}
. ${strings}

verbose=0

. ${cbsdinit}


getjname()
{
	local _t

	_t=$( echo ${1} | ${GREP_CMD} ":")

	[ $? -ne 0 ] && return 1

	jname=${1%%:*}
	rfile=${1##*:}
}

try_remote()
{
	# this is only wrapper for compile correct arguments for cbsd nodescp

	node=$( jwhereis ${jname} )

	[ -z "${node}" ] && log_err 1 "Node not found for jail ${jname}"

	cbsdlogger NOTICE ${CBSD_APP}: try to get remote jstatus for ${jname} on ${node}
	status=$( rexe node=${node} cbsd jstatus ${jname} )
	[ "${status}" = "0" ] && log_err 1 "jail ${jname} not running on ${node}"
	sqlfile="${node}"
	. ${jrcconf}
	[ "${baserw}" = "1" ] && path=${data}
	[ -z "${path}" ] && log_err 1 "path not found"
}

scp()
{
	local _ret _cmd

	[ $# -ne 2 ] && err 1 "${N1_COLOR}$0 jail1:remotefile1 localfile1 [ localfile2 jail2@:remotefile2 ]${N0_COLOR}"
	jname=
	rfile=
	rarg=0

	if getjname $1; then
		if getjname $2; then
			log_err 1 "${N1_COLOR}only one remote path${N0_COLOR}"
		fi
		rarg=1
	else
		if getjname $2; then
			rarg=2
		fi
	fi

	[ -z "${jname}" -o -z "${rfile}" ] && log_err 1 "${N1_COLOR}jail path via jail:path records not determine${N0_COLOR}"

	validate_jname "${jname}" || log_err 1 "${N1_COLOR}bad jname: ${jname}${N0_COLOR}"

	. ${jrcconf}
	if [ $? -eq 1 ]; then
		try_remote

		if [ ${rarg} -eq 1 ]; then
			cbsdlogger NOTICE ${CBSD_APP}: nodescp for ${2} from ${node}:${path}${rfile}
			_cmd="nodescp root=1 ${node}:${path}${rfile} ${2}"
			${_cmd}
			_ret=$?
		else
			cbsdlogger NOTICE ${CBSD_APP}: nodescp for ${1} to ${node}:${path}${rfile}
			_cmd="nodescp root=1 $1 ${node}:${path}${rfile}"
			${_cmd}
			_ret=$?
		fi
		[ ${_ret} -ne 0 ] && ${ECHO} "${N1_COLOR}jscp cmd failed: ${N2_COLOR}${_cmd}${N0_COLOR}"
		return ${_ret}
	fi

	[ ${jid} -eq 0 ] && log_err 1 "${N1_COLOR}jail not active: ${jname}${N0_COLOR}"

	[ ${baserw} -eq 1 ] && path="${data}"

	if [ ${rarg} -eq 1 ]; then
		DIR=$( ${DIRNAME_CMD} ${2} )
		[ ! -d "${DIR}" ] && ${MKDIR_CMD} -p ${DIR}

		if [ -n "${RSYNC_CMD}" ]; then
			#we have rsync for that
			[ ${verbose} -eq 1 ] && set -o xtrace
			cbsdlogger NOTICE ${CBSD_APP}: rsync ${path}${rfile} ${2}
			_cmd="${RSYNC_CMD} -azzlH ${path}${rfile} ${2}"
			${_cmd}
			_ret=$?
			case ${_ret} in
				0|6|24|25)
					# rsync good codes
					_ret=0
					;;
				*)
					;;
			esac
			[ ${verbose} -eq 1 ] && set +o xtrace
		else
			#no rsync, just scp
			[ ${verbose} -eq 1 ] && set -o xtrace
			cbsdlogger NOTICE ${CBSD_APP}: cp for ${path}${rfile} to ${2}
			_cmd="${CP_CMD} -a ${path}${rfile} ${2}"
			${_cmd}
			_ret=$?
			[ ${verbose} -eq 1 ] && set +o xtrace
		fi
	else
		DIR=$( ${DIRNAME_CMD} ${path}${rfile} )
		[ ${verbose} -eq 1 ] && set -o xtrace
		[ ! -d "${DIR}" ] && ${MKDIR_CMD} -p "${DIR}"
		[ ${verbose} -eq 1 ] && set +o xtrace
		if [ -n "${RSYNC_CMD}" ]; then
			#we have rsync for that
			[ ${verbose} -eq 1 ] && set -o xtrace
			cbsdlogger NOTICE ${CBSD_APP}: rsync for ${1} to ${path}${rfile}
			_cmd="${RSYNC_CMD} -azzlH ${1} ${path}${rfile}"
			${_cmd}
			_ret=$?
			case ${_ret} in
				0|6|24|25)
					# rsync good codes
					_ret=0
					;;
				*)
					;;
			esac
			[ ${verbose} -eq 1 ] && set +o xtrace
		else
			#no rsync, just scp
			[ ${verbose} -eq 1 ] && set -o xtrace
			cbsdlogger NOTICE ${CBSD_APP}: cp for ${1} to ${path}${rfile}
			_cmd="${CP_CMD} -a ${1} ${path}${rfile}"
			${_cmd}
			_ret=$?
			[ ${verbose} -eq 1 ] && set +o xtrace
		fi
	fi

	[ ${_ret} -ne 0 ] && ${ECHO} "${N1_COLOR}jscp cmd failed: ${N2_COLOR}${_cmd}${N0_COLOR}"
	return ${_ret}
}

### MAIN ###
# change current dir
cd ${CBSD_PWD}

ARGS=

# exclude jname= and mode= params from args str
for i in $*; do
	prefix8=$( substr --pos=0 --len=7 --str="${i}" )
	[ "${prefix8}" = "verbose=" ] && continue
	if [ -z "${ARGS}" ]; then
		ARGS="${i}"
	else
		ARGS="${ARGS} ${i}"
	fi
done

if [ "${verbose}" = "0" ]; then
	quiet="-q"
else
	quiet=
fi

scp ${ARGS}
ret=$?
[ ${ret} -ne 0 ] && ${ECHO} "${N1_COLOR}jscp cmd failed: ${N2_COLOR}${_cmd}${N0_COLOR}"

exit ${ret}
