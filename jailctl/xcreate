#!/usr/local/bin/cbsd
#v11.1.12
MYARG="jconf"
MYOPTARG="inter ver arch customskel fstablocal delpkglist removejconf pkglist jprofile zfs_snapsrc"
XEN_ARGS="astart vm_cpus vm_ram vm_os_type vm_boot vm_os_profile vm_vnc_port xen_vnc_tcp_bind xen_vnc_resolution cd_vnc_wait protected hidden maintenance ip4_addr \
vnc_password state_time on_poweroff on_reboot on_crash spice_default vm_spice_port xen_spice_tcp_bind xen_spice_resolution spice_password soundhw debug_engine \
is_cloud ci_jname ci_fqdn ci_template ci_interface ci_ip4_addr ci_gw4 ci_nameserver_address ci_nameserver_searchci_adjust_inteface_helper ci_user_add ci_user_pw_user \
ci_user_pw_root ci_interface_mtu"
MYOPTARG="${MYOPTARG} ${XEN_ARGS}"
MYDESC="Create XEN domain from config file"
ADDHELP="inter=0 to prevent any questions and to accept answers by default\n\
customskel = additional skel directory applyed above jail structrure\n\
fstablocal = additional fstab file stored as fstab.local\n\
jprofile = specify jail profile for creating jail\n\
zfs_snapsrc = use ZFS snapshot as data source\n"
CBSDMODULE="xen"
EXTHELP="wf_xcreate"

. ${subr}

readconf buildworld.conf
readconf zfs.conf

. ${distdir}/universe.subr
. ${distdir}/freebsd_world.subr
. ${distdir}/xen.subr

. ${cbsdinit}

# if some of params specified via args, store them as temporary vars
for i in ${XEN_ARGS}; do
	unset o${i}
	eval "o${i}=\$$i"
done

. ${system}
. ${mdtools}
. ${jfs}

if [ -z "${jconf}" ]; then
	jconf=$( ${MKTEMP_CMD} )
	export CBSD_INIT_SAVE2FILE=${jconf}		# save args and generate jconf
	. ${cbsdinit}
	unset CBSD_INIT_SAVE2FILE
fi

[ -z "${jconf}" -a -z "${jname}" ] && err 1 "${N1_COLOR}Please set for xcreate: ${N2_COLOR}${jconf}${N0_COLOR}"
[ -n "${removejconf}" ] && oremovejconf="${removejconf}"

really_create_base()
{
	if [ "${vm_os_type}" = "freebsd" -a "${from_jail}" = "1" ]; then
		case ${xen_profile} in
			"FreeBSD-bsdinstall-jail")
				export UNAME_r="${ver}-RELEASE"
				export DISTRIBUTIONS="kernel.txz base.txz"
				bsdinstall jail ${data}
				unset UNAME_r
				nobase=1
				;;
			*)
				nobase=0 # 0 for jail2iso
				init_target_arch
				init_basedir
				init_kerneldir
				get_base -v ${ver}
				#populate_freebsd_world
				#populate_freebsd_kernel
				customskel
				;;
		esac
	fi
}

really_create_vm()
{
	local _res _msg

	#test for imgtype
	case ${zfsfeat} in
			1)
				;;
			*)
				# force switch imgtype to md when no zfsfeat
				imgtype="md"
	esac

	if [ "${from_jail}" ]; then
		${ECHO} "${N1_COLOR}Stage2: ${N2_COLOR}jail2iso...${N0_COLOR}"
		[ -z "${swapsize}" ] && swapsize="0"

		mountbase -o "" -p "" -d "" -c "" -s ""
		#echo "jail2iso jname=${jname} nameserver=${jnameserver} ip4_addr=${ip4_addr} gw4=${gw4} dstname=${jname}.$$.img swapsize=${swapsize} freesize=${imgsize} dstdir=/tmp host_hostname="${host_hostname}" media=bhyve quiet=1 prunelist=0 nobase=${nobase} vm_guestfs=${vm_guestfs} fromfile=${temprcconf}"
		jail2iso jname=${jname} nameserver=${jnameserver} ip4_addr=${ip4_addr} gw4=${gw4} dstname=${jname}.$$.img swapsize=${swapsize} freesize=${imgsize} dstdir=/tmp host_hostname="${host_hostname}" media=xen quiet=1 vm_guestfs=${vm_guestfs}
		# fromfile=${temprcconf} addmod=0

		jremove ${jname}
		create_fs ${data}

		#test for zfs mounted & mount if not
		case ${zfsfeat} in
			1)
				. ${zfstool}
				zfsmnt ${data}
				[ $? -eq 2 ] && /sbin/zfs mount "${ZPOOL}"
				;;
		esac

		${SYSRC_CMD} -qf ${jconf} ver="${ver}" > /dev/null
		/bin/mv /tmp/${jname}.$$.img ${data}/${defdsk}
	else
		_msg=$( virtual_create_dsk -p ${data}/${defdsk} -s ${imgsize} -f 1 -t ${imgtype} 2>&1 )
		_res=$?
		if [ ${_res} -ne 0 ]; then
			xremove ${jname}
			err 1 "xcreate error: Couldn't create the image file. ${_msg}"
		fi
	fi
}

### MAIN
[ ! -f "${jconf}" ] && err 1 "${N1_COLOR}no such jconf file${N0_COLOR}";
st_time=$( ${DATE_CMD} +%s )
over="${ver}"
oarch="${arch}"
jconf=$( ${REALPATH_CMD} ${jconf} )

# make tmp jconf and work with it, insofar CBSD can
# change content of jconf in the course of their work
# we must leave the original file intact
jconf_tmp="${jconf}.tmp"
/bin/cp -a ${jconf} ${jconf_tmp}

if [ -z "${delpkglist}" ]; then
	delpkglist=0
else
	delpkglist=1
fi

temprcconf="${ftmpdir}/jcreate_jconf.$$"

# TRIM DOS CRLF
${CAT_CMD} ${jconf} |${TR_CMD} -d \\r > ${temprcconf}

# read jname
. ${temprcconf}

# if some of params specified via args, restore them from temporary vars
for i in ${XEN_ARGS}; do
	eval _mytest=\$o$i
	# Adjust some missed optional args
	if [ -z "${_mytest}" ]; then
		case "${i}" in
			emulator)
				_mytest="xen"
				;;
			host_hostname)
				_mytest="${jname}.my.domain"
				;;
			path)
				_mytest="${jaildir}/${jname}"
				;;
			data)
				_mytest="${jaildatadir}/${jname}-${jaildatapref}"
				;;
			rcconf)
				_mytest="${jailrcconfdir}/rc.conf_${jname}"
				;;
			vm_os_type)
				_mytest=$( echo "${_mytest}" | ${TR_CMD} '[:upper:]' '[:lower:]' )
				;;
			*)
				# skip unknown args
				continue
				;;
		esac
	fi
	${SYSRC_CMD} -qf ${temprcconf} ${i}="${_mytest}" > /dev/null 2>&1
done

jstatus jname=${jname} > /dev/null 2>&1
[ $? -eq 0 ] || log_err 1 "${N1_COLOR}VM already exist: ${N2_COLOR}${jname}${N0_COLOR}"

vm_os_type=$( echo "${vm_os_type}" | ${TR_CMD} '[:upper:]' '[:lower:]' )
${SYSRC_CMD} -qf ${temprcconf} vm_os_type="${vm_os_type}" > /dev/null 2>&1

if [ "${zfsfeat}" = "1" ]; then
	readconf zfs.conf
	. ${zfstool}
	DATA=$( /sbin/zfs get -Ho value name ${jaildatadir} )
	_msg=$( /sbin/zfs create -o mountpoint=${workdir}/vm/${jname} ${DATA}/${jname} )
	_res=$?
	if [ ${_res} -ne 0 ]; then
		echo "${_msg}"
		exit ${_res}
	fi

	vm_zfs_guid=$( /sbin/zfs get -Ho value guid ${DATA}/${jname} 2>/dev/null )
	[ -z "${vm_zfs_guid}" ] && vm_zfs_guid="0"

	[ -z "${data}" ] && data="${jaildatadir}/${jname}-${jaildatapref}"
	olddata="${data}"
	data="${workdir}/vm/${jname}"
	${SYSRC_CMD} -qf ${temprcconf} data="${data}" > /dev/null 2>&1
	#set -o xtrace
	/bin/ln -sf ${data} ${olddata}
	/bin/ln -sf ${data} ${jailsysdir}/${jname}
	#set +o xtrace
else
	#remove_data_dir ${data}
	[ ! -d "${jailsysdir}/${jname}" ] && /bin/mkdir -p ${jailsysdir}/${jname}
	vm_zfs_guid="0"
fi

. ${buildconf}
. ${temprcconf}

# profile
[ -z "${vm_os_profile}" ] && log_err 1 "${N1_COLOR}No such vm profile: ${N2_COLOR}vm-${vm_os_type}-${vm_os_profile}.conf${N0_COLOR}"

template_profile=

# Merge with default and profile settings
[ -n "${vm_os_profile}" -a -n "${vm_os_type}" ] && template_profile="vm-${vm_os_type}-${vm_os_profile}.conf"

conf_owner=$( /usr/bin/stat -f "%u" ${jconf_tmp} )
conf_group=$( /usr/bin/stat -f "%g" ${jconf_tmp} )

${TRUNCATE_CMD} -s0 ${jconf_tmp}

for merge_me in ${etcdir}/defaults/xen-default-default.conf ${etcdir}/defaults/${template_profile} ${etcdir}/xen-default-default.conf ${etcdir}/${template_profile} ${temprcconf}; do
	[ ! -r "${merge_me}" ] && continue;
	tmp_merge=$( ${MKTEMP_CMD} )
	merge from=${jconf_tmp} to=${merge_me} out=${tmp_merge}
	[ -f ${tmp_merge} ] && /bin/mv ${tmp_merge} ${jconf_tmp}
done

# make permission for group write
/usr/sbin/chown ${conf_owner}:${conf_group} ${jconf_tmp}

. ${jconf_tmp}

# minimal config allows not to specify rcconf variable
# e.g: minimal config
# jname="freebsd1"
# imgsize="10g";
# vm_os_profile="FreeBSD-x64-12.0";
# vm_profile="FreeBSD-x64-12.0"
[ -z "${rcconf}" ] && rcconf="${jailrcconfdir}/rc.conf_${jname}"

[ -n "${oremovejconf}" ] && removejconf="${oremovejconf}"

if [ ${removejconf} = "1" ]; then
	trap "/bin/rm -f ${temprcconf} ${jconf} ${jconf_tmp}" HUP INT ABRT BUS TERM  EXIT
else
	trap "/bin/rm -f ${temprcconf} ${jconf_tmp}" HUP INT ABRT BUS TERM  EXIT
fi

[ -z "${jname}" ] && log_err 1 "${N1_COLOR}No such jname variable${N0_COLOR}"

if [ "${vm_os_type}" = "freebsd" -a "${from_jail}" = "1" ]; then
	# change emulator type for jcreate
	${SYSRC_CMD} -qf ${jconf_tmp} emulator="jail" > /dev/null 2>&1

	if [ -n "${jprofile}" ]; then
		. ${settingstui}
		if [ -r "${etcdir}/jail-freebsd-${jprofile}.conf" ]; then
			${ECHO} "${N1_COLOR}Use profile: ${N2_COLOR}${etcdir}/jail-freebsd-${jprofile}.conf${N0_COLOR}"
			merge_apply_profiles ${etcdir}/jail-freebsd-${jprofile}.conf ${jconf_tmp}
		elif [ -r "${etcdir}/defaults/jail-freebsd-${jprofile}.conf" ]; then
			${ECHO} "${N1_COLOR}Use profile: ${N2_COLOR}${etcdir}/defaults/jail-freebsd-${jprofile}.conf${N0_COLOR}"
			merge_apply_profiles ${etcdir}/defaults/jail-freebsd-${jprofile}.conf ${jconf_tmp}
		fi
	fi

	${SYSRC_CMD} -qf ${jconf_tmp} emulator="xen" > /dev/null 2>&1
fi

# adjust some missed variabled
readconf vnc.conf
readconf spice.conf
[ -z "${xen_vnc_resolution}" ] && ${SYSRC_CMD} -qf ${jconf_tmp} xen_vnc_resolution="${default_vnc_width}x${default_vnc_height}"  > /dev/null 2>&1
[ -z "${xen_vnc_tcp_bind}" ] && ${SYSRC_CMD} -qf ${jconf_tmp} xen_vnc_tcp_bind="${default_vnc_tcp_bind}"  > /dev/null 2>&1
[ -z "${xen_vnc_resolution}" ] && ${SYSRC_CMD} -qf ${jconf_tmp} xen_spice_resolution="${default_spicy_width}x${default_spicy_height}"  > /dev/null 2>&1
[ -z "${xen_vnc_tcp_bind}" ] && ${SYSRC_CMD} -qf ${jconf_tmp} xen_spice_tcp_bind="${default_spicy_tcp_bind}"  > /dev/null 2>&1

if [ -z "${cd_vnc_wait}" ]; then
	case "${default_vnc_wait}" in
		auto|1)
			${SYSRC_CMD} -qf ${jconf_tmp} cd_vnc_wait="1"  > /dev/null 2>&1
			;;
		*)
			${SYSRC_CMD} -qf ${jconf_tmp} cd_vnc_wait="0"  > /dev/null 2>&1
			;;
	esac
fi

[ -z "${vnc_password}" ] && ${SYSRC_CMD} -qf ${jconf_tmp} vnc_password="${default_vnc_password}" > /dev/null 2>&1
[ -z "${spicy_password}" ] && ${SYSRC_CMD} -qf ${jconf_tmp} spicy_password="${default_spicy_password}" > /dev/null 2>&1

# re-read jail params and apply personal after profile
. ${jconf_tmp}

# apply pkglist from tpl_pkglist
[ -n "${tpl_pkglist}" ] && ${SYSRC_CMD} -qf ${jconf_tmp} pkglist="${tpl_pkglist}" > /dev/null 2>&1

if [ "${mod_cbsd_queue_enabled}" = "YES" -a -z "${MOD_CBSD_QUEUE_DISABLED}" ]; then
	readconf cbsd_queue.conf
	[ -z "${cbsd_queue_backend}" ] && MOD_CBSD_QUEUE_DISABLED="1"
fi

# CBSD QUEUE
if [ "${mod_cbsd_queue_enabled}" = "YES" -a -z "${MOD_CBSD_QUEUE_DISABLED}" ]; then
	[ -n "${cbsd_xen_queue_name}" ] && ${cbsd_queue_backend} cbsd_xen_queue_name=${cbsd_xen_queue_name} id=${jname} cmd=xcreate vm_ram=${vm_ram} vm_cpus=${vm_cpus} vm_os_type=${vm_os_type} astart=${astart} protected=${protected} vnc_port='0' status=1
fi

# ip validate
if [ -n "${interface}" -a "${inteface}" != "0" ]; then
	### CHECK FOR IP ( 1 - check for interfaces) ####
	checkip ip=${ips} check=1 > /dev/null 2>&1
	case $? in
		0)
			log_err 1 "${N1_COLOR}Ip not in pool range${N0_COLOR}"
			;;
		1)	;;
		2)
			${ECHO} "${N1_COLOR}Warning:${N2_COLOR} Ip already exists in LAN${N0_COLOR}"
			;;
		*)
			log_err 1 "Unknown code from checkip"
			;;
	esac
fi

# imgsize validate
if [ -n "${imgsize_min}" -a -n "${imgsize}" ]; then

	if ! is_number "${imgsize_min}"; then
		# imgsize_min is number. assume value in bytes
		imgsize_min_bytes="${imgsize_min}"
	else
		imgsize_min_bytes=$( get_bytes ${imgsize_min} )
	fi

	imgsize_min_human_mb=$(( imgsize_min_bytes / 1024 / 1024 ))

	if ! is_number "${imgsize}"; then
		# imgsize is number. assume value in bytes
		imgsize_bytes="${imgsize}"
	else
		imgsize_bytes=$( get_bytes ${imgsize} )
	fi

	imgsize_human_mb=$(( imgsize_bytes / 1024 / 1024 ))

	if [ ${imgsize_bytes} -lt ${imgsize_min_bytes} ]; then
		if [ "${zfsfeat}" = "1" ]; then
			/sbin/zfs destroy ${DATA}/${jname}
		fi
		err 1 "${N1_COLOR}imgsize too small: ${N2_COLOR}${imgsize_bytes} ( ${imgsize_human_mb}mb ) < ${imgsize_min_bytes} ( ${imgsize_min_human_mb}mb )${N0_COLOR}"
	fi
fi

# vm_ram validate
if [ -n "${vm_ram_min}" -a -n "${vm_ram}" ]; then

	if ! is_number "${vm_ram_min}"; then
		# vm_ram_min is number. assume value in bytes
		vm_ram_min_bytes="${vm_ram_min}"
	else
		vm_ram_min_bytes=$( get_bytes ${vm_ram_min} )
	fi

	vm_ram_min_human_mb=$(( vm_ram_min_bytes / 1024 / 1024 ))

	if ! is_number "${vm_ram}"; then
		# vm_ram is number. assume value in bytes
		vm_ram_bytes="${vm_ram}"
	else
		vm_ram_bytes=$( get_bytes ${vm_ram} )
	fi

	vm_ram_human_mb=$(( vm_ram_bytes / 1024 / 1024 ))

	if [ ${vm_ram_bytes} -lt ${vm_ram_min_bytes} ]; then
		if [ "${zfsfeat}" = "1" ]; then
			/sbin/zfs destroy ${DATA}/${jname}
		fi
		err 1 "${N1_COLOR}vm_ram too small: ${N2_COLOR}${vm_ram_bytes} ( ${vm_ram_human_mb}mb ) < ${vm_ram_min_bytes} ( ${vm_ram_min_human_mb}mb )${N0_COLOR}"
	fi
fi

defdsk="dsk1.vhd"
defnic="nic1.vhd"

if [ -z "${zfs_snapsrc}" ]; then
	really_create_base
	really_create_vm
	/bin/cp ${jconf} ${rcconf}
else
	create_fs ${data}
fi

[ ! -d "${data}" ] && log_err 1 "Can't create datadir ${data}"
[ ! -d ${jailfstabdir}  ] && /bin/mkdir -p ${jailfstabdir}

/usr/local/bin/cbsd ${miscdir}/updatesql ${jailsysdir}/${jname}/local.sqlite ${distdir}/share/local-xendsk.schema xendsk
/usr/local/bin/cbsd ${miscdir}/updatesql ${jailsysdir}/${jname}/local.sqlite ${distdir}/share/local-xennic.schema xennic
#/usr/local/bin/cbsd ${miscdir}/updatesql ${jailsysdir}/${jname}/local.sqlite ${distdir}/share/local-xen-p9shares.schema p9shares
/usr/local/bin/cbsd ${miscdir}/updatesql ${jailsysdir}/${jname}/local.sqlite ${distdir}/share/local-xen-settings.schema settings

[ -n "${fstablocal}" -a -f "${fstablocal}" ] && /bin/cp ${fstablocal} ${jailfstabdir}/${jailfstabpref}${jname}.local

/bin/cp ${jconf} ${rcconf}
. ${rcconf}

# Finnaly export to SQLite
jregister jname=${jname} mode=new

_res=$?

if [ ${_res} -ne 0 ]; then
	${ECHO}
	${ECHO} "${N1_COLOR}Creating ${jname} failed: ${N2_COLOR}cbsd jregister${N0_COLOR}"
	${ECHO} "${N1_COLOR}Please review bad config file: ${N2_COLOR}/tmp/rc.conf_${jname}${N0_COLOR}"
	/bin/mv ${rcconf} /tmp
	#cleanup
	[ -f "${mount_fstab}" ] && /bin/rm -f ${mount_fstab}
	remove_data_dir ${data}
	exit 1
fi

echo
if [ "${vm_zfs_guid}" != "0" ]; then
	[ -z "${NOINTER}" ] && ${ECHO} "${N1_COLOR}Global VM ZFS guid: ${N2_COLOR}${vm_zfs_guid}${N0_COLOR}"
	cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite UPDATE settings SET vm_zfs_guid=\"${vm_zfs_guid}\"
fi

if [ -z "${NOINTER}" ]; then
	${ECHO} "${N1_COLOR}To edit VM properties use: ${N2_COLOR}cbsd xconfig jname=${jname}${N0_COLOR}"
	${ECHO} "${N1_COLOR}To start VM use: ${N2_COLOR}cbsd xstart ${jname}${N0_COLOR}"
	${ECHO} "${N1_COLOR}To stop VM use: ${N2_COLOR}cbsd xstop ${jname}${N0_COLOR}"
	${ECHO} "${N1_COLOR}To remove VM use: ${N2_COLOR}cbsd xremove ${jname}${N0_COLOR}"
	${ECHO} "${N1_COLOR}For attach VM console use: ${N2_COLOR}cbsd xlogin ${jname}${N0_COLOR}"
	echo
	${ECHO} "${N1_COLOR}Creating ${jname} complete: ${N2_COLOR}Enjoy!${N0_COLOR}"
fi

/bin/rm -f ${rcconf}

if [ -z "${sectorsize}" ]; then
	sectorsize="${default_sectorsize}"
	[ -z "${sectorsize}" ] && sectorsize="4096"
fi

if [ ${zfsfeat} -eq 1 -a "${imgtype}" = "zvol" ]; then
	. ${zfstool}
	dsk_zfs_guid=$( get_dsk_zfs_guid -p ${data}/${defdsk} 2>&1 )
	_ret=$?
	[ ${_ret} -ne 0 ] && dsk_zfs_guid="0"
fi

[ -z "${dsk_zfs_guid}" ] && dsk_zfs_guid="0"

dsk_bsize=0

if is_number "${imgsize}"; then
	if conv2bytes ${imgsize}; then
		dsk_bsize="${convval}"
	else
		dsk_bsize=0
	fi
else
	# already on bytes ?
	dsk_bsize="${imgsize}"
fi

if [ -n "${xen_virtio_type}" ]; then
	${miscdir}/sqlcli ${jailsysdir}/${jname}/local.sqlite "INSERT INTO xendsk ( jname,dsk_controller,dsk_path,dsk_slot,dsk_size,dsk_zfs_guid ) VALUES ( \"${jname}\",\"${xen_virtio_type}\",\"${defdsk}\","0",\"${dsk_bsize}\",\"${dsk_zfs_guid}\" )"
else
	${miscdir}/sqlcli ${jailsysdir}/${jname}/local.sqlite "INSERT INTO xendsk ( jname,dsk_path,dsk_slot,dsk_size,dsk_zfs_guid ) VALUES ( \"${jname}\",\"${defdsk}\","0",\"${dsk_bsize}\",\"${dsk_zfs_guid}\" )"
fi

if [ -n "${nic_driver}" ]; then
	${miscdir}/sqlcli ${jailsysdir}/${jname}/local.sqlite "INSERT INTO xennic ( jname,nic_driver,nic_parent ) VALUES ( \"${jname}\", \"${nic_driver}\", \"${interface}\" )"
else
	${miscdir}/sqlcli ${jailsysdir}/${jname}/local.sqlite "INSERT INTO xennic ( jname,nic_parent ) VALUES ( \"${jname}\", \"${interface}\" )"
fi

# update state_time
cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite UPDATE settings SET state_time="(strftime('%s','now'))"
cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite UPDATE settings SET created="(strftime('%s','now'))"

# Check if SIZE if valid: can't be smaller then template
if is_number ${vm_ram}; then
	# not number, try to convert
	if conv2bytes "${vm_ram}"; then
		vm_ram="${convval}"
	else
		err 1 "${vm_ram} is not number and we can't convert int via conv2bytes"
	fi
fi

if [ -n "${register_iso_as}" -a -n "${register_iso_name}" ]; then
	cd_name="${register_iso_as}"
	cd_path="${srcdir}/iso/${register_iso_name}"

	cd_rec_num=$( cbsdsqlro storage_media SELECT COUNT\(path\) FROM media WHERE name=\"${cd_name}\" AND path=\"${cd_path}\" AND type=\"iso\" AND jname=\"-\" )

	if [ "${cd_rec_num}" = "0" ]; then
		# register new ISO with assignment to this VM
		_res=$( media mode=register name="${register_iso_as}" path="${srcdir}/iso/${register_iso_name}" type=iso jname=${jname} 2>&1 )
		_ret=$?
		[ ${_ret} -ne 0 ] && err 1 "${N1_COLOR}xcreate: media register error: ${_res}${N0_COLOR}"
	else
		# we have free/unassignent CD. link to this VM
		cbsdsqlrw storage_media "UPDATE media SET jname=\"${jname}\" WHERE jname=\"-\" AND type=\"iso\" AND name=\"${cd_name}\" AND path=\"${cd_path}\""
	fi
fi

[ ! -d ${jailsysdir}/${jname} ] && /bin/mkdir -p ${jailsysdir}/${jname}
[ ! -d ${jailsysdir}/${jname}/etc ] && /bin/mkdir -p ${jailsysdir}/${jname}/etc

system_dir="facts.d \
stop.d \
start.d \
master_prestop.d \
master_prestart.d \
master_poststop.d \
master_poststart.d \
remove.d"

for i in ${system_dir}; do
	if [ -n "${systemskeldir}" -a "${systemskeldir}/${i}" ]; then
		if [ -d ${systemskeldir}/${i} ]; then
			/bin/cp -a ${systemskeldir}/${i} ${jailsysdir}/${jname}/${i}
		else
			${ECHO} "${N1_COLOR}xcreate: warning: no such dir: ${N2_COLOR}${systemskeldir}/${i}${N0_COLOR}"
			continue
		fi
	else
		[ ! -d "${i}"  ] && /bin/mkdir -m 0775 -p ${jailsysdir}/${jname}/${i}
	fi
	/usr/sbin/chown ${cbsduser}:${cbsduser} ${jailsysdir}/${jname}/${i}
done

# is cloud-init-based ?
if [ ${is_cloud} -eq 1 ]; then
	${ECHO} "${N1_COLOR}auto-generate cloud-init settings: ${N2_COLOR}${jailsysdir}/${jname}/cloud-init${N0_COLOR}"
	# auto adjust some missed settings

	[ -z "${ci_jname}" ] && ${SYSRC_CMD} -qf ${jailsysdir}/${jname}/rc.conf_${jname} ci_jname="${jname}" > /dev/null 2>&1
	[ -z "${ci_fqdn}" ] && ${SYSRC_CMD} -qf ${jailsysdir}/${jname}/rc.conf_${jname} ci_fqdn="${host_hostname}" > /dev/null 2>&1

	case "${ip4_addr}" in
		[Dd][Hh][Cc][Pp])

			iptype ${ci_ip4_addr}
			_ret=$?
			case ${_ret} in
			1)
				ip4_addr="${IWM}"
				;;
			*)
				ip4_addr="${ci_ip4_addr}"
				;;
			esac

			bset jname="${jname}" ip4_addr="${ip4_addr}" > /dev/null 2>&1
			;;
	esac

	readconf cloud-init.conf

	[ -z "${ci_nameserver_address}" ] && ${SYSRC_CMD} -qf ${jailsysdir}/${jname}/rc.conf_${jname} ci_nameserver_address="${default_ci_nameserver_address}" > /dev/null 2>&1
	[ -z "${ci_nameserver_search}" ] && ${SYSRC_CMD} -qf ${jailsysdir}/${jname}/rc.conf_${jname} ci_nameserver_search="${default_ci_nameserver_search}" > /dev/null 2>&1
	[ -z "${ci_interface}" ] && ${SYSRC_CMD} -qf ${jailsysdir}/${jname}/rc.conf_${jname} ci_interface="${default_ci_interface}" > /dev/null 2>&1
	[ -z "${ci_user_pw_user}" ] && ${SYSRC_CMD} -qf ${jailsysdir}/${jname}/rc.conf_${jname} ci_user_pw_user="${ci_user_pw_user}" > /dev/null 2>&1
	[ -z "${ci_user_pw_root}" ] && ${SYSRC_CMD} -qf ${jailsysdir}/${jname}/rc.conf_${jname} ci_user_pw_root="${ci_user_pw_root}" > /dev/null 2>&1
	[ -z "${ci_user_pw_root}" ] && ${SYSRC_CMD} -qf ${jailsysdir}/${jname}/rc.conf_${jname} ci_user_pw_root="${ci_user_pw_root}" > /dev/null 2>&1

	# GET MAC
	nic_hwaddr0=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT nic_hwaddr FROM bhyvenic LIMIT 1 )

	if [ "${nic_hwaddr0}" = "0" ]; then
		# gen MAC
		nic_hwaddr0=$( mac_gen 00:a0:98 )
		cbsdlogger NOTICE ${CBSD_APP}: xcreate for ${jname}: MAC address randomized and updated for nic id 1: ${nic_hwaddr0}
		cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite "UPDATE xennic SET nic_hwaddr=\"${nic_hwaddr0}\" WHERE id=\"1\""
	fi

	[ -z "${ci_nic_hwaddr0}" ] && ${SYSRC_CMD} -qf ${jailsysdir}/${jname}/rc.conf_${jname} ci_nic_hwaddr0="${nic_hwaddr0}" > /dev/null 2>&1

	case "${ip4_addr}" in
		[Dd][Hh][Cc][Pp])
			${SYSRC_CMD} -qf ${jailsysdir}/${jname}/rc.conf_${jname} ip4_addr="${ci_ip4_addr}" > /dev/null 2>&1
			;;
	esac

	case "${vm_os_type}" in
		windows)
			cloudengine="cloudinit-base"
			;;
		*)
			cloudengine="cloud-init"
			;;
	esac

	cbsdlogger NOTICE ${CBSD_APP}: cloudinit mode=gen fromfile=${jailsysdir}/${jname}/rc.conf_${jname} jname=${jname} cloudengine="${cloudengine}"
	cloudinit mode=gen fromfile=${jailsysdir}/${jname}/rc.conf_${jname} jname=${jname} cloudengine="${cloudengine}"
fi

# unset vnc_password when vnc_password=0 (reserved)
[ "${vnc_password}" ] && cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite "UPDATE settings SET vnc_password=''"

# mark the first disk bootable
cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite "UPDATE xendsk SET bootable='true' WHERE dsk_path=\"${defdsk}\""

# rctl
. ${sharedir}/rctl.conf
for i in ${RCTL} ${RCTL_EXTRA}; do
	_val=
	eval _val="\$rctl_${i}"
	if [ -n "${_val}" ]; then
		jrctl jname=${jname} mode=set ${i}=${_val} > /dev/null 2>&1 || /usr/bin/true
	fi
done

# store profile in jail system dir
storeconf vm-${vm_os_type}-${vm_os_profile}.conf ${jailsysdir}/${jname}/etc/vm-${vm_os_type}-${vm_os_profile}.conf

# create ascii rc.conf file for overwriting values
${CAT_CMD} > ${jailsysdir}/${jname}/etc/rc.conf <<EOF
# The parameters in this file can overwrite the settings from SQLite3 or global params
# e.g:
# xen_flags="-p 1:1 -p 2:2"
EOF

jcleanup jname=${jname}

if [ "${mod_cbsd_queue_enabled}" = "YES" -a -z "${MOD_CBSD_QUEUE_DISABLED}" ]; then
	[ -n "${cbsd_xen_queue_name}" ] && ${cbsd_queue_backend} cbsd_xen_queue_name=${cbsd_xen_queue_name} id="${jname}" cmd=xcreate status=2 data_status=0
fi

end_time=$( ${DATE_CMD} +%s )
cbsdlogger NOTICE ${CBSD_APP}: vm ${jname} has been created in $(( end_time - st_time ))s

[ "${runasap}" = "1" ] && xstart inter=0 jname=${jname}

exit 0
