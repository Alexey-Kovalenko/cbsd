# XEN-related TUI function
if [ ! "$_CBSD_SETTINGS_TUI_XEN_SUBR" ]; then
_CBSD_SETTINGS_TUI_XEN_SUBR=1
###

allow_devfs_msg="Allow privileged users inside the jail mount and unmount DEVFS file system"
allow_dying_msg="Allow making changes to a dying Jail"
allow_fdescfs_msg="Jail may mount the fdescfs file system"
allow_fusefs_msg="Allow privileged users inside the jail mount and unmount fuse-based file systems."
allow_kmem_msg="Allow kmem and /dev/io devices for jail. Warning: this is insecure options. Use it only for private purposes/X-jails"
allow_mount_msg="Allow privileged users inside the jail mount and unmount file system"
allow_nullfs_msg="Allow privileged users inside the jail mount and unmount NULLFS file system"
allow_procfs_msg="Allow privileged users inside the jail mount and unmount PROCFS file system"
allow_raw_sockets_msg="The jail root is allowed to create raw sockets"
allow_read_msgbuf_msg="Allow an unprivileged user to read the kernel message buffer"
allow_reserved_ports_msg="Allow the jail root may bind to ports lower than 1024. For FreeBSD 11.1+"
sysvsem_msg="Controls access to SYSV semaphores"
sysvshm_msg="Controls access to shared memory"
sysvmsg_msg="Controls access to SYSV message queues"
allow_tmpfs_msg="Allow privileged users inside the jail mount and unmount TMPFS file system"
allow_unprivileged_proc_debug_msg="Unprivileged processes in the jail may use debugging facilities"
allow_vmm_msg="The jail may access vmm(4). Useful for jailed bhyve"
allow_zfs_msg="Privileged users inside the jail will be able to mount and unmount the ZFS file system"
applytpl_msg="1,yes - Apply CBSD templates for Jail environment"
arch_msg="Target architecture, i386/amd64 or qemu-users arch"
astart_msg="1,yes - Automatically start Jail when system boot"
basename_msg="Alternative jailbase name"
baserw_msg="1,yes - Jail have personal copy of base system with write access, no NULLFS mount. 0,no - read-only and NULLFS"
childrenmax_msg="Enable hierarchical jails and set limit max children"
cpuset_msg="Associate group of CPUs to jail. 0 - for all cores, See man 1 cpuset for valid value"
data_msg="Data directory for Jail"
depend_msg="Specify a Jail or jails that this jail depends on"
devfs_ruleset_msg="DEVFS ruleset number for Jail devfs"
enforce_statfs_msg="This determines what information processes in a jail are able to get about mount points"
exec_consolelog_msg="Jail consolelog file for stdout/stderr output. Possible values: path_to_file, 0 - for disable log to file, 1 - for automatic $logdir/jname.log"
exec_fib_msg="The FIB routing table to set when running commands inside the prison"
exec_timeout_msg="The maximum amount of time to wait for a command to complete"
floatresolv_msg="1,yes - Floating /etc/resolv.conf content"
hidden_msg="Invisible environment flag. 1 - hide environment for frontend"
host_hostname_msg="Jail Fully Qualified Domain Name"
interface_msg="Auto create and auto remove IP on selected NICs. 0 for disable, auto - for auto detect"
ip4_addr_msg="Jail IPv4 and/or IPv6 address. Current CBSD IPv4 pool: ${nodeippool}\n\
 Use IP/PREFIX form, comma-separated for aliases.\n\
 '0' to disable IP creating by CBSD (useful for vnet jails)\n\
 'DHCP' for determine free IPv4 automatically\n\
 'nic1#ip_addr,nic2#ip_addr' for multiple NIC form\n"
jdomain_msg="Specify CBSD node group name for jail"
jname_msg="Jail name. Name must begin with a letter / a-z /  and not have any special symbols: -,.=%"
kernelmount_msg="1,yes - Jail have mounted /boot/kernel tree in read-only. Useful for DTRACE stuff in Jail"
mdsize_msg="Enter size for the images"
mkhostsfile_msg="Automatically set IP/NAME in /etc/hosts when jail started"
mount_devfs_msg="Mount DEVFS filesystem in the jail"
mount_fdescfs_msg="Mount a FDESCFS filesystem on the chrooted /dev/fd directory"
mount_kernel_msg="1,yes - Jail have mounted /boot/kernel tree in read-only. Useful for DTRACE stuff in Jail"
mount_obj_msg="1,yes - Jail have mounted /usr/obj tree in read-only"
mount_ports_msg="1,yes - Jail have /usr/ports /usr/ports tree in read-only"
mount_src_msg="1,yes - Jail have shared /usr/src tree in read-only"
path_msg="Mount point for Jail"
persist_msg="Allows a jail to exist without any processes."
protected_msg="Prevent modification or deletion of a environment. 1 - protect/lock"
runasap_msg="Start jail ASAP upon creation"
stop_timeout_msg="The maximum amount of time to wait for a jailed processes to exit after sending them a SIGTERM signal"
ver_msg="Jail base source version"
vnet_msg="1.yes - Enable VIMAGE/VNet feature"
zfs_snapsrc_msg="Use this ZFS snapshot as source for jail data, e.g zmirror/jails/jail1@init"

GET_ALLOW_READ_MSGBUF_MSG="Select READ_MSGBUF behaviour"
GET_ALLOW_VMM_MSG="Select allow.vmm behaviour"
GET_CD_BOOT_FIRMWARE_MSG="Choose CD boot firmware"
GET_CONSOLE_MSG="Choose default console"
GET_CPUS_MSG="Number of CPUs: 1, max: 16"
GET_EFI_MSG="Choose UEFI firmware"
GET_GUESTFS_MSG="Choose FS for boot image"
GET_GW4_MSG="Enter default gateway inside VMs or jail"
GET_HOSTBRIDGE_MSG="Hostbridge for VMs, eg: hostbridge or amd_hostbridge"
GET_IMGSIZE_MSG="Allocate X size of image free space: 100m, 1g"
GET_IMGTYPE_MSG="Choose image type"
GET_ISOPATH_MSG="Path to ISO image in srcdir/iso, eg: release.iso. 0 - for default img_iso"
GET_JAILPROFILE_MSG="Profile for jcreate"
GET_NODENAME_MSG="Change nodename. Warning: this operation will recreate the ssh keys in $workdir/.ssh dir"
GET_RAM_MSG="RAM in MB, eg: 512, 1024M, 2g"
GET_SWAPSIZE_MSG="Configure swap partitional in X size (usual RAMx2), 0 - for disable, e.g: 4g"
GET_VM_CPU_TOPOLOGY_MSG="Select CPU topology profile name"
GET_VM_ISOPATH_MSG="Select available/registered ISO"
GET_VM_PACKAGE_MSG="Choose package name"
GET_VM_VNC_PORT_MSG="VNC port. 0 - for auto, 1 - disable"
GET_VMPROFILE_MSG="Select profile for VMs"



# xen form for xen vnc options
get_construct_xen_vnc_options_menu()
{
	local _input _res item_let=A

	local title="VNC Options"
	local defaultitem=
	local menu_choice=
	local _checkbox="vnc_enabled"

	f_dialog_default_fetch defaultitem

	readconf vnc.conf
	if [ -z "${vnc_enabled}" ]; then
		vnc_enabled="${vnc_default}"
	fi

	[ -z "${xen_vnc_resolution}" ] && xen_vnc_resolution="${default_vnc_width}x${default_vnc_height}"
	[ -z "${xen_vnc_tcp_bind}" ] && xen_vnc_tcp_bind="${default_vnc_tcp_bind}"
	[ -z "${xen_vnc_vgaconf}" ] && xen_vnc_vgaconf="${default_vnc_vgaconf}"

	if [ "${vnc_password}" = "0" ]; then
		unset vnc_password
	else
		[ -z "${vnc_password}" ] && vnc_password="${default_vnc_password}"
	fi

	# checkbox mark
	for i in ${_checkbox}; do
		eval _mytest=\$$i
		if [ "${_mytest}" = "1" ]; then
			export ${i}_mark="X"
		else
			export ${i}_mark=" "
		fi
	done

	local menu_list=""

	menu_list="${menu_list} '${item_let} vnc_enabled'		'[${vnc_enabled_mark}]'		'Enable VNC protocol instead of SPICE'"
	inc_menu_index item_let
	menu_list="${menu_list} '${item_let} xen_vnc_tcp_bind'		'[${xen_vnc_tcp_bind}]'		'Default: ${default_vnc_tcp_bind}'"
	inc_menu_index item_let
	menu_list="${menu_list} '${item_let} vnc_password'		'[${vnc_password}]'		'Default: see vnc.conf file'"

	menu_list="${menu_list} 'Save'	'Save changes and quit'	'Save!'"

	cbsd_menubox
	retval=$?

	f_dialog_data_sanitize menu_choice
	f_dialog_menutag_store "$menu_choice"
	f_dialog_default_store "$menu_choice"

	return $retval
}

# xen form for xen spice options
get_construct_xen_spice_options_menu()
{
	local _input _res item_let=A

	local title="SPICE Options"
	local defaultitem=
	local menu_choice=
	local _checkbox="spice_enabled"

	f_dialog_default_fetch defaultitem

	readconf spice.conf

	[ -z "${spice_default}" ] && spice_default="${default_spice_default}"

	if [ -z "${spice_enabled}" ]; then
		spice_enabled="${spice_default}"
	fi

	[ -z "${xen_spice_resolution}" ] && xen_spice_resolution="${default_spice_width}x${default_spice_height}"
	[ -z "${xen_spice_tcp_bind}" ] && xen_spice_tcp_bind="${default_spice_tcp_bind}"

	if [ "${spice_password}" = "0" ]; then
		unset spice_password
	else
		[ -z "${spice_password}" ] && spice_password="${default_spice_password}"
	fi

	# checkbox mark
	for i in ${_checkbox}; do
		eval _mytest=\$$i
		if [ "${_mytest}" = "1" ]; then
			export ${i}_mark="X"
		else
			export ${i}_mark=" "
		fi
	done

	local menu_list=""

	menu_list="${menu_list} '${item_let} spice_enabled'		'[${spice_enabled_mark}]'		'Enable SPICE protocol instead of VNC'"
	inc_menu_index item_let
	menu_list="${menu_list} '${item_let} xen_spice_tcp_bind'	'[${xen_spice_tcp_bind}]'	'Default: ${default_spice_tcp_bind}'"
	inc_menu_index item_let
	menu_list="${menu_list} '${item_let} spice_password'		'[${spice_password}]'		'Default: see spice.conf file'"

	menu_list="${menu_list} 'Save'	'Save changes and quit'	'Save!'"

	cbsd_menubox
	retval=$?

	f_dialog_data_sanitize menu_choice
	f_dialog_menutag_store "${menu_choice}"
	f_dialog_default_store "${menu_choice}"

	return ${retval}
}



# xen form for xen vnc options
get_construct_xen_vnc_options()
{
	local mychoice index
	local old_defaultitem="${mtag}"

	while [ 1 ]; do
		get_construct_xen_vnc_options_menu || break

		index=${mtag%% *}
		mychoice=${mtag##* }

		case "${mychoice}" in
			"-")
				continue
				;;
			"Save")
				break
				;;
			xen_vnc_tcp_bind)
				title=" vnc bind "
				prompt="default via vnc.conf: ${default_vnc_tcp_bind}\nUse 0.0.0.0 for all IPs"
				defaultitem="${xen_vnc_tcp_bind}"
				cbsd_inputbox_simple && xen_vnc_tcp_bind="${mtag}"
				;;
			xen_vnc_resolution)
				get_construct_xen_vnc_resulution_menu
				;;
			xen_vnc_vgaconf)
				get_construct_xen_vnc_vgaconf_menu
				;;
			vnc_password)
				get_construct_vnc_password
				;;
			vnc_enabled)
				# set/invert spice_enabled by old vnc_enabled values
				# since these are mutually exclusive options
				spice_enabled="${vnc_enabled}"
				invert_checkbox ${mychoice}
				if [ "${vnc_enabled}" = "1" ]; then
					spice_default="0"
				else
					spice_default="1"
				fi
				continue
				;;
			*)
				invert_checkbox ${mychoice}
				continue
				;;
		esac
	done

	f_dialog_default_store "${old_defaultitem}"
}

# xen form for xen spice options
get_construct_xen_spice_options()
{
	local mychoice index
	local old_defaultitem="${mtag}"

	while [ 1 ]; do
		get_construct_xen_spice_options_menu || break

		index=${mtag%% *}
		mychoice=${mtag##* }

		case "${mychoice}" in
			"-")
				continue
				;;
			"Save")
				break
				;;
			xen_spice_tcp_bind)
				title=" SPICE bind "
				prompt="default via spice.conf: ${default_spice_tcp_bind}\nUse 0.0.0.0 for all IPs"
				defaultitem="${xen_spice_tcp_bind}"
				cbsd_inputbox_simple && xen_spice_tcp_bind="${mtag}"
				;;
			xen_spice_resolution)
				get_construct_xen_spice_resulution_menu
				;;
			spice_password)
				get_construct_spice_password
				;;
			spice_enabled)
				# set/invert vnc_enabled by old spice_enabled values
				# since these are mutually exclusive options
				vnc_enabled="${spice_enabled}"
				invert_checkbox ${mychoice}
				spice_default="${spice_enabled}"
				continue
				;;
			*)
				invert_checkbox ${mychoice}
				continue
				;;
		esac
	done

	f_dialog_default_store "${old_defaultitem}"
}


make_bhyve_part()

# virtual part for xen jconf
make_xen_part()
{
/bin/cat >> ${TMPFILE} << EOF
exec_start="${exec_start}"
exec_stop="${exec_stop}"
emulator="xen";
imgsize="${imgsize}";
vm_cpus="${vm_cpus}";
vm_ram="${vm_ram}";
vm_os_type="${vm_os_type}";
vm_efi="${vm_efi}";

iso_site="${iso_site}";
iso_img="${iso_img}";
register_iso_name="${register_iso_name}"
register_iso_as="${register_iso_as}"

virtio_type="${virtio_type}";
gw4="${gw4}";
vm_os_profile="${vm_os_profile}";
jprofile="${jprofile}";
swapsize="${swapsize}";
vm_iso_path="${register_iso_as}";
vm_guestfs="${vm_guestfs}";
vm_vnc_port="${vm_vnc_port}";

cd_vnc_wait="${cd_vnc_wait}";
xen_vnc_resolution="${xen_vnc_resolution}";
xen_vnc_tcp_bind="${xen_vnc_tcp_bind}";
vnc_password='${vnc_password}';

with_img_helpers="";
runasap="${runasap}";
nic_driver="${nic_driver}";

spice_default="${spice_default}";
xen_spice_resolution="${xen_spice_resolution}";
xen_spice_tcp_bind="${xen_spice_tcp_bind}";
spice_password='${spice_password}';

on_poweroff="${on_poweroff}";
on_reboot="${on_reboot}";
on_crash="${on_crash}";

xen_soundhw="${xen_soundhw}";
EOF
}

# xen form select for xen_soundhw
# /usr/local/lib/xen/bin/qemu-system-i386 -soundhw help
get_construct_xen_soundhw()
{
	local _input _res

	local title="${GET_IMGTYPE_MSG}"
	local defaultitem="${xen_soundhw}"

	local menu_list="
		'none'		'No sound'			'Disable sound'
		'sb16'		'Creative Sound Blaster 16'	'Creative Sound Blaster 16'
		'es1370'	'ENSONIQ AudioPCI ES1370'	'ENSONIQ AudioPCI ES1370'
		'ac97'		'Intel 82801AA AC97 Audio'	'Intel 82801AA AC97 Audio'
		'adlib'		'Yamaha YM3812 (OPL2)'		'Yamaha YM3812 (OPL2)'
		'gus'		'Gravis Ultrasound GF1'		'Gravis Ultrasound GF1'
		'cs4231a'	'CS4231A'			'CS4231A'
		'hda'		'Intel HD Audio'		'Intel HD Audio'
		'pcspk'		'PC speaker'			'PC speaker'
	" # END-QUOTE

	cbsd_menubox
	retval=$?

	case ${retval} in
		${DIALOG_OK})
			[ -n "${mtag}" ] && xen_soundhw="${mtag}"
			;;
		*)
			;;
	esac

	return ${retval}
}

# xen form for submenu for xen audio options
get_construct_xen_audio_options_menu()
{
	local _input _res item_let=A

	local title="Audio Options"
	local defaultitem=
	local menu_choice=

	f_dialog_default_fetch defaultitem

	local menu_list=""

	menu_list="${menu_list}	'${item_let} xen_soundhw'	'[${xen_soundhw}]'	'Default: ${default_xen_soundhw}'"
	menu_list="${menu_list}	'Save'				'Save changes and quit'	'Save!'"

	cbsd_menubox
	retval=$?

	f_dialog_data_sanitize menu_choice
	f_dialog_menutag_store "${menu_choice}"
	f_dialog_default_store "${menu_choice}"

	return ${retval}
}

# xen form for submenu for xen audio options
get_construct_xen_audio_options()
{
	local mychoice index
	local old_defaultitem="${mtag}"

	while [ 1 ]; do
		get_construct_xen_audio_options_menu || break

		index=${mtag%% *}
		mychoice=${mtag##* }

		case "${mychoice}" in
			"-")
				continue
				;;
			"Save")
				break
				;;
			xen_soundhw)
				get_construct_xen_soundhw
				;;
		esac
	done

	f_dialog_default_store "${old_defaultitem}"
}

###
fi
