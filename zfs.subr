if [ ! "$_CBSD_ZFS_SUBR" ]; then
_CBSD_ZFS_SUBR=1
###

# return 0 if $1 is not valid ZFS mountpoint
# return 1 if $1 is valid ZFS mountpoint and mounted
# return 2 if $1 is valid ZFS mountpoint and not mounted
# if  zfsmnt /mnt; then
#    echo " not zfs (mounted or not) mountpoint"
# fi
# export ZPOOL for name ZFS for $1 mountpoint
zfsmnt() {
	local _A

	ZPOOL=$(/sbin/zfs list -Ho name,mountpoint | while read _name _mnt; do
		[ "${_mnt}" = "${1}" ] && echo ${_name} && exit 2
	done)

	if [ $? -eq 2 ]; then
		#    Check for mounted
		_A=$( /sbin/zfs get -Ho value mounted ${ZPOOL} )
		[ "${_A}" = "yes" ] && return 1
		return 2
	else
		return 0
	fi
}

# return 0 if $1 is not valid ZFS filesystem
# return 1 if $1 is valid ZFS mountpoint and mounted
# return 2 if $1 is valid ZFS mountpoint and not mounted
# if  zfsfs /mnt; then
#    echo " not zfs (mounted or not) mounted"
# fi
zfsfs() {
	local _A

	_A=$(/sbin/zfs list -Ho name | while read _name; do
		[ "${_name}" = "${1}" ] && exit 2
	done)

	if [ $? -eq 2 ]; then
		#    Check for mounted
		_A=$( /sbin/zfs get -Ho value mounted ${1} )
		[ "${_A}" = "yes" ] && return 1
		return 2
	else
		return 0
	fi
}

# export zmnt if $zroot exist, return 1
getmnt() {
	local _res

	[ -z "$1" ] && return 1
	zmnt=$( /sbin/zfs get -Ho value mountpoint ${1} )
	return $?
}

# return 0 if ${ZPOOL}/$1 zfs source exist
# if zfsroot jail1; then
# echo "zroot/$jail1 exist
# fi
zfsroot() {
	[ -z "$1" ] && return 0

	/sbin/zfs list -H -o name | while read _mnt; do
		[ "$_mnt" = "${ZPOOL}/${1}" ] && exit 0
	done

	return $?
}


# $1 - oldjname
# $2 - newjname
zfs_snapshot_rename()
{
	local _fs _jname _mod _snapname _oldjname _newjname
	_oldjname="$1"
	_newjname="$2"

	[ -z "${_oldjname}" -o -z "${_newjname}" ] && return 0

	# [ -n "${_oldjname}" ] && _mod="${ZPOOL}/${_oldjname}"
	_mod="${ZPOOL}"

	for _fs in $( /sbin/zfs list -H -r -t snapshot -o name ${_mod} 2>/dev/null ); do
		_jname=$( /sbin/zfs get -H -o value -s local cbsdsnap:jname "${_fs}" 2>/dev/null )
		[ -z "${_jname}" ] && continue
		[ -n "${_oldjname}" -a "${_oldjname}" != "${_jname}" ] && continue
		_snapname=$( /sbin/zfs get -H -o value -s local cbsdsnap:snapname "${_fs}" 2>/dev/null )
		[ -z "${_snapname}" ] && continue
		/sbin/zfs set cbsdsnap:jname=${_newjname} ${ZPOOL}@${_snapname}
		# ${ECHO} "${MAGENTA}ZFS snapshot renamed: ${GREEN}${_snapname}${NORMAL}"
	done
}


# test if symlink point to zvol
# extract and return 0 with is_zvol params as zvol
# $1 - path to symlink
is_getzvol()
{
	is_zvol=
	local _zvol_pref=
	local _res=1
	local tmp_zvol=

	[ -z "${1}" ] && return 1
	[ ! -h "${1}" ] && return 1

	tmp_zvol=$( /usr/bin/readlink ${1} 2>/dev/null )

	if [ -n "${tmp_zvol}" ]; then
		_zvol_pref=$( substr --pos=0 --len=10 --str=${tmp_zvol} )
		[ "${_zvol_pref}" = "/dev/zvol/" ] && _res=0
		is_zvol=$( echo ${tmp_zvol} | /usr/bin/sed s:/dev/zvol/::g )
	else
		is_zvol=
	fi

	return ${_ret}
}


# create ZVOL from file
# -b 0,1 - show progressbar (1 - by default), via cbsdtee
# -f full path to file
# -p alternative parent ZPOOL name (datadir zpool by default)
# -n ZVOL name (by default: basename of ${_file}
# if ! zfs_create_zvol_from_file -f /boot/kernel/kernel -n kernelvolume; then
#    echo ";=("
# fi
# return 0 when on success
# return 1 when error
# return 2 when zvol already exist
zfs_create_zvol_from_file()
{
	local _file= _pool= _zvol_name= DATA= _ebytes= _human_bytes=
	local _res _bar=1

	while getopts "b:f:p:n:" opt; do
		case "${opt}" in
			b) _bar="${OPTARG}" ;;
			f) _file="${OPTARG}" ;;
			p) _pool="${OPTARG}" ;;
			n) _zvol_name="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	if [ ! -r "${_file}" ]; then
		echo "zfs_create_zvol_from_file: no such file: ${_file}"
		return 1
	fi

	_ebytes=$( /usr/bin/stat -f "%z" ${_file} 2>/dev/null )

	if [ ${_ebytes} -lt 128 ]; then
			echo "zfs_create_zvol_from_file: file size too small: ${_ebytes} bytes"
			return 1
	fi

	if [ "${fsfeat}" = "0" ]; then
		echo "zfs_create_zvol_from_file: zfsfeat = 0"
		return 1
	fi

	[ -z "${_zvol_name}" ] && _zvol_name=$( /usr/bin/basename ${_file} )

	if conv2human "${_ebytes}"; then
			_human_bytes=${convval}
	else
			_human_bytes="${_ebytes}"
	fi

	. ${zfstool}

	if [ -z "${_pool}" ]; then
		DATA=$( /sbin/zfs get -Ho value name ${jaildatadir} )
	else
		DATA="${_pool}"
	fi

	if [ -r "/dev/zvol/${DATA}/${_zvol_name}" ]; then
			echo "zfs_create_zvol_from_file: zvol already exist: ${_zvol_name}"
			return 2
	fi

	_msg=$( /sbin/zfs create -V ${_ebytes} -o volmode=dev ${DATA}/${_zvol_name} 2>&1 )
	_res=$?

	if [ ${_res} -ne 0 ]; then
		echo "zfs_create_zvol_from_file: /sbin/zfs create -V ${_ebytes} -o volmode=dev ${DATA}/${_zvol_name}: ${_msg}"
		return 1
	fi

	if [ ${_bar} -eq 1 ]; then
		${ECHO} "${MAGENTA}Converting ${GREEN}${_myfile}${MAGENTA} -> ${GREEN}/dev/zvol/${DATA}/${_zvol_name}${MAGENTA}: ${GREEN}${_human_bytes}${MAGENTA}...${NORMAL}"
		/bin/dd if=${_myfile} bs=4m | ${miscdir}/cbsdtee -e ${_ebytes} > /dev/zvol/${DATA}/${_zvol_name}
		echo
	else
		/bin/dd if=${_myfile} of=/dev/zvol/${DATA}/${_zvol_name} bs=4m
		echo
	fi

	return 0
}

###
fi
