#!/usr/local/bin/cbsd
#v12.0.12
MYARG="jname dstdir media"
MYOPTARG="dstname name label product publisher prunelist freesize host_hostname ip4_addr gw4 timezone nameserver nic inter quiet efi nobase swapsize fromfile vm_guestfs applytpl"
MYDESC="Convert jail into cd9660 ISO or memstick image"
ADDHELP="dstdir= destination dir for storing jname.iso\n\
dstname= for alternative image name\n\
name= for alternative kernel name (GENERIC is default)\n\
label= label for media\n\
media= iso,memstick,livecd or bhyve\n\
prunelist= path to prunelist, default is \${sharedir}/jail2iso-prunelist. 0 for disable.\n\
freesize= reserved (expand to) X size of image free space (100m, 1g)\n\
host_hostname= set hostname in rc.conf image (freebsd only)\n\
ip4_addr= set ip4 addr or 'DHCP' in rc.conf image (freebsd only\n\
gw4= gateway for IPv4\n\
timezone= set timezone in image (freebsd only)\n\
nameserver= set nameserver in image (freebsd only)\n\
nic= specify network nic for ip4_addr\n\
efi= - set 0 to disable efi by default (if efiboot.img exist its preffered boot method)\n\
swapsize= - Allocate/configure SWAP partition to X size\n\
fromfile= - Read arguments from file\n\
vm_guestfs= ufs or zfs. Default is: ufs\n\
applytpl= manage rc.conf for image, e.g set ip,hostname,nameserver. default - 1, apply\n"
EXTHELP="wf_jail2iso"

. ${subr}

readconf buildworld.conf
readconf jail2iso.conf

# todo: to conf
EFI_PART_SIZE="260m"			# default FreeBSD efi partition

applytpl=1

. ${cbsdinit}

oapplytpl="${applytpl}"

. ${system}
. ${zfstool}
. ${distdir}/universe.subr
. ${distdir}/bhyve.subr
. ${buildconf}
. ${jrcconf}

[ $? -eq 1 ] && err 1 "${N1_COLOR}no such jail: ${N2_COLOR}${jname}${N0_COLOR}"
[ ${jid} -ne 0 ] && err 1 "${N1_COLOR}jail is active. please stop them first: ${N2_COLOR}${jname}${N0_COLOR}"
[ -r "${fromfile}" ] && . ${fromfile}
[ -z "${quiet}" ] && quiet=0
[ -z "${efi}" ] && efi=1
[ -z "${swapsize}" ] && swapsize=0
[ -z "${vm_guestfs}" ] && vm_guestfs="ufs"

[ "${media}" = "bhyve" -a -z "${freesize}" ] && err 1 "${N1_COLOR}For media=bhyve please set freesize= value. For example: ${N2_COLOR}freesize=1g${N0_COLOR}"

init_target_arch
init_srcdir
init_supported_arch
init_basedir
init_kerneldir

[ -n "${label}" ] && LABEL="${label}"
[ -n "${product}" ] && PRODUCT="${product}"
[ -n "${publisher}" ] && PUBLISHER="${publisher}"

TMP_DIR="${tmpdir}/${jname}-iso.$$"
DST_DIR="${tmpdir}${tmpdir}mfsroot.$$"

TRAP=

clear_tmp_dir()
{
	if [ -d "${TMP_DIR}" -o -f "${TMP_DIR}" ]; then
		nice -n 19 ${IDPRIO_CMD} 29 ${CHFLAGS_CMD} -R noschg ${TMP_DIR}
		${RM_CMD} -rf ${TMP_DIR}
	fi
}

# Prepare MFSRoot part
prepare_dir()
{
	local rcscript="/etc/rc.d/preparedir"

	${CP_CMD} -rP ${path}/etc ${DST_DIR}/

	case "${media}" in
		iso)
			MOUNTROOT="${MOUNT_CMD} -oro -t cd9660 /dev/iso9660/${LABEL} /mnt"
			;;
		memstick)
			MOUNTROOT="${MOUNT_CMD} -oro /dev/ufs/${LABEL} /mnt"
			;;
	esac

	${CAT_CMD} > ${DST_DIR}${rcscript} <<EOF
#!/bin/sh
#
# Copyright (c) 2015-2020 CBSD Team

# PROVIDE: preparedir
# KEYWORD: nojail
# BEFORE: sysctl

export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

MOUNTOK=0
maxretry=10
retry=0

if [ ! -d /mnt/bin ]; then
	printf "Waiting \${maxretry}s for mount root"
	while [ \$MOUNTOK -ne 1 ]; do
		printf "."
		${MOUNTROOT} > /dev/null 2>&1
		if [ \$? -ne 0 ]; then
			sleep 1
			retry=\$((retry+1))
		else
			echo
			MOUNTOK=1
		fi
		if [ \$retry -ge \${maxretry} ]; then
			echo
			echo "Unsuccess. Drop to single mode"
			echo "Mount command: ${MOUNTROOT}"
			exit 0
		fi
	done
fi

if [ ! -d /usr/bin ]; then
	MD=\$( ${MDCONFIG_CMD} -o readonly -a -t vnode -f /mnt/usr.uzip )
	${MOUNT_CMD} -oro /dev/\${MD}.uzip /mnt/usr
	${MOUNT_CMD} -oro -t nullfs /mnt/usr /usr
	${MOUNT_CMD} -oro -t nullfs /mnt/boot /boot
	hash -r
fi
EOF

	${CHMOD_CMD} 0555 ${DST_DIR}${rcscript}

	[ -f "${path}/etc/rc.conf" ] && ${CP_CMD} ${path}/etc/rc.conf ${DST_DIR}/etc/rc.conf

	# Here is mfsroot location
	if [ -f "${jailsysdir}/${jname}/tmpfsdir" ]; then
		${CP_CMD} ${miscdir}/tmpfsdir ${DST_DIR}/etc/rc.d/
	fi
}

prunelist()
{
	[ ! -f "${prunelist}" ] && return 0 # no prune
	[ -z "${1}" ] && return 0 # sanity

	${ECHO} "${N1_COLOR}Prune file by list: ${N2_COLOR}${prunelist}${N0_COLOR}"

	for FILE in $( ${CAT_CMD} ${prunelist} ); do
		[ -z "${FILE}" ] && continue
		case ":${FILE}" in
			:#* | :)
				continue
				;;
		esac
		${RM_CMD} -rf ${1}/${FILE} 2>/dev/null
	done
}

# $1 - rootdir
epilogue_img()
{
	local _rootfs="${1}"
	[ -z "${_rootfs}" -a ! -d "${_rootfs}" ] && return 0
	[ -z "${nic}" ] && nic="DEFAULT"

	${ECHO} "${N1_COLOR}Epilogue for ${N2_COLOR}${_rootfs}${N0_COLOR}"

	# for ISO too?
	[ "${media}" = "memstick" ] && return 0

	${SYSRC_CMD} -qf ${_rootfs}/etc/rc.conf fsck_y_enable="YES" >/dev/null

	[ -n "${host_hostname}" ] && ${SYSRC_CMD} -qf ${_rootfs}/etc/rc.conf hostname="${host_hostname}" >/dev/null

	if [ -n "${ip4_addr}" -a "${ip4_addr}" != "0" ]; then
		case "${ip4_addr}" in
			[Dd][Hh][Cc][Pp])
				${SYSRC_CMD} -qf ${_rootfs}/etc/rc.conf ifconfig_${nic}="DHCP" >/dev/null
				;;
			*)
				${SYSRC_CMD} -qf ${_rootfs}/etc/rc.conf ifconfig_${nic}="inet ${ip4_addr}" >/dev/null
		esac
	fi

	[ -n "${gw4}" ] && ${SYSRC_CMD} -qf ${_rootfs}/etc/rc.conf defaultrouter="${gw4}" >/dev/null

	if [ -n "${nameserver}" ]; then
		IFS=","
		for i in ${nameserver}; do
			echo "nameserver ${i}" >> ${_rootfs}/etc/resolv.conf
		done
		IFS=" "
	fi

	if [ -n "${timezone}" ]; then
		[ -f "/usr/share/zoneinfo/${timezone}" ] && ${CP_CMD} /usr/share/zoneinfo/${timezone} ${_rootfs}/etc/localtime
	fi
}


makemfsroot()
{
	local _filelist _ver
	local _tmpdir=$( ${MKTEMP_CMD} -d )

	mfsrootfile="${tmpdir}/mfsroot.$$"

	_ver=${ver%%.*}

	_filelist="${distsharedir}/${platform}-filemin_${_ver}.txt.xz"

	${ECHO} "${N1_COLOR}mfsroot index: ${N2_COLOR}${_filelist}${N0_COLOR}"

	copy-binlib filelist=${_filelist} dstdir=${_tmpdir} basedir=${BASE_DIR} chaselibs=1

	local _size=0

#	_size=$(${FIND_CMD} ${_tmpdir} | while read _myfile; do
#		_size=$((_size + `/usr/bin/stat -f %z ${_myfile}`))
#		echo ${_size}
#	done |${TAIL_CMD} -n1 )

#	_size=$(( _size / 1024 / 1024 ))
#	_size=$(( _size + 10 ))
#	_size=$(( _size * 1024 ))

#	echo "$_size"

	# NOT REL
	_size=80000
#	_size=230000

	${DD_CMD} if=/dev/zero of=${mfsrootfile} count=${_size} bs=1k
	DEV=$( ${MDCONFIG_CMD} -a -t vnode -f ${mfsrootfile} )
	${BSDLABEL_CMD} -w /dev/${DEV} auto
	nice -n 19 ${IDPRIO_CMD} 29 ${NEWFS_CMD} -n -i ${BS} -m 0 -o space /dev/${DEV}
	${MKDIR_CMD} -p ${DST_DIR}
	${MOUNT_CMD} /dev/${DEV} ${DST_DIR}
	cd ${_tmpdir} && nice -n 19 ${IDPRIO_CMD} 29 ${FIND_CMD} -E ${_tmpdir} \( -type f -or -type d -or -type l \) -print | ${SED_CMD} s:${_tmpdir}:./:g | nice -n 19 ${IDPRIO_CMD} 29 ${CPIO_CMD} -pdmu ${DST_DIR}

	nice -n 19 ${IDPRIO_CMD} 29 ${CHFLAGS_CMD}  -R noschg ${_tmpdir}
	${RM_CMD} -rf ${_tmpdir}
	prepare_dir
	[ "${prunelist}" != "0" ] && prunelist ${DST_DIR}
	cd /
	# make flags for preparedir script
	[ -d "${DST_DIR}/usr/bin" ] && ${RM_CMD} -rf ${DST_DIR}/usr/bin
	${UMOUNT_CMD} -f ${DST_DIR} && ${RMDIR_CMD} ${DST_DIR}
	${MDCONFIG_CMD} -d -u ${DEV}
}


show_bhyve_message()
{
	if [ ${freebsdhostversion} -lt 1300021 ]; then
		local _tap_module="if_tap"
	else
		local _tap_module="if_tuntap"
	fi

	$ECHO "${N1_COLOR}Completed. Image ready for bhyve, example:${N0_COLOR}"
	${CAT_CMD} << EOF
 % kldload vmm
 % kldload ${_tap_module}
 % sysctl -w net.link.tap.up_on_open=1
 % ifconfig tap0 create
 % ifconfig bridge0 create
EOF
    ${ECHO} " % ifconfig bridge0 addm ${mynic} addm tap0    ${N2_COLOR}<< -- where ${mynic} is uplink${N0_COLOR}"
    ${CAT_CMD} << EOF
 % ifconfig bridge0 up
 % sh /usr/share/examples/bhyve/vmrun.sh -d ${dstdir}/${dstname} ${jname}
EOF
}

# $1 - source dir
# $2 - dst file image
create_img_for_dir()
{
	local base_size minfree1 minfree2
	local _res _msg
	local _reserved_size="512m"		# free reserved size
	local _efi_size="${EFI_PART_SIZE}"

	if is_number "${_reserved_size}"; then
		if conv2bytes ${_reserved_size}; then
			_reserved_size="${convval}"
		fi
	fi

	if is_number "${_efi_size}"; then
		if conv2bytes ${_efi_size}; then
			_efi_size="${convval}"
		fi
	fi

	[ -z "${freesize}" ] && freesize=0
	[ -z "${imgfreesize}" ] && imgfreesize=0

	if [ -d "${1}" ]; then
		base_size=$( ${DU_CMD} -sk ${1} | ${AWK_CMD} '{printf $1"k"}' )
	else
		base_size=0
	fi

	if is_number ${freesize}; then
		if conv2bytes ${freesize}; then
			freesize="${convval}"
		fi
	fi

	if is_number ${swapsize}; then
		if conv2bytes ${swapsize}; then
			swapsize="${convval}"
		fi
	fi

	if is_number ${imgfreesize}; then
		if conv2bytes ${imgfreesize}; then
			imgfreesize="${convval}"
		fi
	fi

	if is_number ${base_size}; then
		if conv2bytes ${base_size}; then
			base_size="${convval}"
		fi
	fi

	# we need calculate 8% minfree from base_size
	# minfree=$(( base_size * 8 / 100 ))
	minfree1=$(( base_size * 9 / 100 )) # 9% - du -sk and conv2bytes fault compensation
	minfree2=$(( freesize * 9 / 100 )) # 9% - du -sk and conv2bytes fault compensation

	all_size=$(( base_size + freesize + minfree1 + minfree2 + imgfreesize + swapsize + _reserved_size + _efi_size ))
	#fs_size=$(( base_size + freesize + minfree1 + minfree2 ))
	# ?? recalc
	fs_size="${freesize}"

	if conv2human "${all_size}"; then
		all_size=${convval}
	fi

	echo "r: ${_reserved_size} , e: ${_efi_size} "
	echo "virtual_create_dsk -p ${2} -s ${all_size} -f 0 -t md"

	# todo: type zvol
	_msg=$( virtual_create_dsk -p ${2} -s ${all_size} -f 0  -t md )
	_res=$?
	if [ ${_res} -ne 0 ]; then
		err 1 "Error: Couldn't create the image file. ${_msg}"
	fi
}


bhyve_zfs_install()
{
	local mnttmp tmpjname
	local _ret
	${KLDSTAT_CMD} -qm zfs || ${KLDLOAD_CMD} zfs
	mnttmp=$( ${MKTEMP_CMD} -d )

	local poolname="tank"
	local freepool=0
	local poolnum=0
	local mypool="${poolname}" # first version of poolname, without index

	mypool=$( while [ ${freepool} -eq 0 ]; do
		${ZPOOL_CMD} get -Ho value guid ${mypool} > /dev/null 2>&1
		[ $? -eq 1 ] && freepool=1 && echo "${mypool}" && exit 0  # No such pool here, so take it
		[ ${poolnum} -gt 10 ] && err 1 "${mypool}"
		poolnum=$(( poolnum + 1 ))
		mypool="${poolname}${poolnum}"
	done )

	[ $? -ne 0 ] && err 1 "${N1_COLOR}Can't find free pool name: ${N2_COLOR}${mypool}${N0_COLOR}"

	if [ "${baserw}" = "0" ]; then
		mountbase -o "" -p "" -d "" -c "" -s ""
		if  [ "${ver}" != "empty" ]; then
				[ -f "${mount_fstab}" ] && mountfstab jroot=${path} fstab=${mount_fstab} jname="${jname}" > /dev/null 2>&1
				[ -f "${mount_fstab}.local" ] && mountfstab jroot=${path} fstab=${mount_fstab}.local jname="${jname}" > /dev/null 2>&1
		fi
	fi

	echo "zfsinstall devs=${unit} ver=${ver} arch=${arch} srcdata=${path} mnt=${mnttmp} pool=${mypool} swap=\"${swapsize}\" quiet=1"
	zfsinstall devs=${unit} ver=${ver} arch=${arch} srcdata=${path} mnt=${mnttmp} pool=${mypool} swap="${swapsize}" quiet=1
	_ret=$?
	echo "RET ${_ret}"
	[ ${_ret} -ne 0 ] && err 1 "${N1_COLOR}jail2iso: zfsinstall error${N0_COLOR}"

	# hack for remove all dirty zpool 
	${CAT_CMD} > ${mnttmp}/etc/rc.local <<EOF
${ZPOOL_CMD} list | ${GREP_CMD} UNAVAIL |${AWK_CMD} '{printf \$1"\n"}' |while read _zpool; do
${ZPOOL_CMD} destroy \${_zpool} >/dev/null 2>&1
done

# detect for swap
FSWAP=\$( ${GPART_CMD} list | ${GREP_CMD} -B50 "type: freebsd-swap" | ${GREP_CMD} Name: | ${TAIL_CMD} -n1 |${AWK_CMD} '/Name:/{print \$3}' )

if [ -n "\$FSWAP" ]; then
	echo "/dev/\${FSWAP} none swap sw 0 0" > /etc/fstab
	/sbin/swapon -a
fi

${RM_CMD} -f /etc/rc.local
EOF
	[ ${oapplytpl} -eq 1 ] && epilogue_img ${mnttmp}

	post_module_action ${mnttmp}

	${UMOUNT_CMD} ${mnttmp}/var > /dev/null 2>&1
	${UMOUNT_CMD} ${mnttmp}/tmp > /dev/null 2>&1
	${UMOUNT_CMD} ${mnttmp} > /dev/null 2>&1
	${RMDIR_CMD} ${mnttmp} > /dev/null 2>&1
	${ZPOOL_CMD} export -f ${mypool}
}

check_for_external_mount()
{
	local _i _checkpath="${path}/usr/ports/distfiles ${path}/usr/ports/packages ${path}/usr/src ${path}/usr/obj ${path}/usr/ports ${path}/usr/src"

	for _i in ${_checkpath}; do
		if is_mounted ${_i}; then
			if getyesno "${N1_COLOR}external mount: ${N2_COLOR}${_i}${N1_COLOR}, unmount first?${N0_COLOR}"; then
				${UMOUNT_CMD} -f ${_i}
			fi
		fi
	done
}


make_ufs()
{
	${ECHO} "${N1_COLOR}kernel required: ${ver}${N0_COLOR}"
	# move to kernel init?
	get_kernel

	[ ! -d "${KERNEL_DIR}" ] && err 1 "No such ${KERNEL_DIR}"
	case "${media}" in
		iso|memstick|bhyve|livecd)
			;;
		*)
			err 1 "${N1_COLOR}unknown media type. must be: ${N2_COLOR}iso${N1_COLOR},${N2_COLOR}memstick${N1_COLOR},${N2_COLOR}livecd ${N1_COLOR}or${N2_COLOR} bhyve${N0_COLOR}"
			;;
	esac

	mountbase -o "" -p "" -d "" -c "" -s ""

	if  [ "${ver}" != "empty" ]; then
		if [ "${baserw}" = "0" ]; then
			[ -r "${mount_fstab}" ] && mountfstab jroot=${path} fstab=${mount_fstab} jname="${jname}" > /dev/null 2>&1
			[ -r "${mount_fstab}.local" ] && mountfstab jroot=${path} fstab=${mount_fstab}.local jname="${jname}" > /dev/null 2>&1
		fi
	fi

	check_for_external_mount

	BS=8192
	[ "${media}" != "bhyve" ] && makemfsroot

	TRAP="${TRAP} clear_tmp_dir;"
	trap "${TRAP}" HUP INT ABRT BUS TERM EXIT
	${MKDIR_CMD} -p ${TMP_DIR}
	#echo "[debug] cd ${path} && nice -n 19 ${IDPRIO_CMD} 29 ${PAX_CMD} -p eme -rw . ${TMP_DIR}"

	# not for iso too ?
	if [ "${media}" != "memstick" ]; then
		echo "[debug]cd ${path} && nice -n 19 ${IDPRIO_CMD} 29 ${PAX_CMD} -p eme -rw . ${TMP_DIR}"
		cd ${path} && nice -n 19 ${IDPRIO_CMD} 29 ${PAX_CMD} -p eme -rw . ${TMP_DIR}
		sync
	fi

	[ "${media}" != "bhyve" ] && ${RM_CMD} -rf ${TMP_DIR}/rescue
	[ "${prunelist}" != "0" ] && prunelist ${TMP_DIR}

	# remove archive
	# BAD FOR packages
	#[ "${media}" != "bhyve" ] && ${FIND_CMD} ${TMP_DIR} -type f -name \*.a -delete

	${CP_CMD} -a ${KERNEL_DIR}/boot/kernel ${TMP_DIR}/boot

	if [ "${media}" != "bhyve" ]; then
		${RM_CMD} -f ${TMP_DIR}/boot/kernel/*.symbols
		cd ${TMP_DIR}/boot/kernel && ${GZIP_CMD} -9 ./kernel
	fi

	[ -f "${jailsysdir}/${jname}/loader.conf" ] && ${CP_CMD} ${jailsysdir}/${jname}/loader.conf ${TMP_DIR}/boot/loader.conf

	if [ "${media}" != "bhyve" ]; then
		${CAT_CMD} >> ${TMP_DIR}/boot/loader.conf << EOF
#hw.vga.textmode=1
geom_uzip_load="YES"
tmpfs_load="YES"
nullfs_load="YES"

mfs_load="YES"
mfs_type="mfs_root"
mfs_name="/mfsroot"
vfs.root.mountfrom="ufs:/dev/md0"

net.inet.ip.fw.default_to_accept=1
EOF
else
${CAT_CMD} >> ${TMP_DIR}/boot/loader.conf <<EOF
#hw.vga.textmode=1
console="userboot"
#virtio_load="YES"
#virtio_pci_load="YES"
#virtio_blk_load="YES"
#if_vtnet_load="YES"
EOF
	fi

	case "${media}" in
		iso)
			ROOTFS="/dev/iso9660/${LABEL} /mnt cd9660 ro 0 0"
			;;
		memstick)
			ROOTFS="/dev/ufs/${LABEL} /mnt ufs ro,noatime 1 1"
			;;
		livecd)
			#ROOTFS="/dev/ufs/${LABEL} / ufs rw 1 1"
			ROOTFS="/dev/vtbd0p2    /               ufs     rw      1       1"
			#ROOTFS="gpt/${LABEL} / ufs rw 1 1"
			;;
		bhyve)
			#ROOTFS="/dev/ufs/${LABEL} / ufs rw,noatime 1 1"
			ROOTFS="/dev/vtbd0p2    /               ufs     rw,noatime      1       1"
			#ROOTFS="gpt/${LABEL} / ufs rw,noatime 1 1"
			# cloud init doesn't like '/dev' - /dev/dev/gpt/LABEL as result
			;;
	esac

	if [ "${media}" != "bhyve" ]; then
${CAT_CMD} > ${TMP_DIR}/etc/fstab << EOF
tmpfs /tmp tmpfs rw 0 0
${ROOTFS}
/mnt/boot /boot ${NULLFS} ro 0 0
tmpfs /boot/zfs tmpfs rw 0 0
EOF
	else
${CAT_CMD} > ${TMP_DIR}/etc/fstab <<EOF
${ROOTFS}
EOF

		[ "${swap_size}" != "0" ] && ${CAT_CMD} >> ${TMP_DIR}/etc/fstab <<EOF
/dev/gpt/swap	none	swap	sw	0	0
EOF
	fi

	[ ${oapplytpl} -eq 1 ] && echo "Welcome to ${PRODUCT}" > ${TMP_DIR}/etc/motd

	if [ "${media}" != "bhyve" ]; then
		${MV_CMD} ${mfsrootfile} ${TMP_DIR}/mfsroot
		cd ${TMP_DIR}
		nice -n 19 ${IDPRIO_CMD} 29 ${GZIP_CMD} -9 ${TMP_DIR}/mfsroot
		TRAP="${TRAP} ${RM_CMD} -f ${tmpdir}/usr.img.$$ ;"
		trap "${TRAP}" HUP INT ABRT BUS TERM EXIT
		nice -n 19 ${IDPRIO_CMD} 29 ${MAKEFS_CMD} -o optimization=space -t ffs ${tmpdir}/usr.img.$$ ${TMP_DIR}/usr
		nice -n 19 ${IDPRIO_CMD} 29 ${MKUZIP_CMD} -o ${TMP_DIR}/usr.uzip ${tmpdir}/usr.img.$$
		${CHFLAGS_CMD} -R noschg ${TMP_DIR}/usr && ${RM_CMD} -rf ${TMP_DIR}/usr && ${MKDIR_CMD} ${TMP_DIR}/usr
		#

		# LiveCD location
		[ -f "${jailsysdir}/${jname}/tmpfsdir" ] && ${CP_CMD} ${jailsysdir}/${jname}/tmpfsdir ${TMP_DIR}/etc/
	fi

	if [ "${media}" = "bhyve" ]; then
${CAT_CMD} > ${TMP_DIR}/etc/ttys <<EOF
console "/usr/libexec/getty std.9600"   vt100   on secure
EOF
	fi

	# post action inside image
	[ ${oapplytpl} -eq 1 ] && epilogue_img ${TMP_DIR}
}


# rootpath
post_module_action()
{
	local TMPFILE
	local rootpath
	local tmpjname

	[ -n "${1}" ] && rootpath="${1}"

	[ ! -d "${rootpath}" ] && return 0

	tmpjname=$( path2jail root=${rootpath} )

	# create temporary jail for post-action
	. ${distdir}/jcreate.subr
	TMPFILE=$( ${MKTEMP_CMD} )

	if [ -r "${fromfile}" ]; then
		${CP_CMD} -a ${fromfile} ${TMPFILE}
		${SYSRC_CMD} -qf ${TMPFILE} -x jname
		${SYSRC_CMD} -qf ${TMPFILE} path="${rootpath}"
		${SYSRC_CMD} -qf ${TMPFILE} data="${rootpath}"
	else

		# additional area
		[ -n "${user_pw_root}" ] && ${CAT_CMD} >> ${TMPFILE} <<EOF
user_pw_root='${user_pw_root}';
EOF

		[ -n "${pkglist}" ] && echo "pkglist=\"${pkglist}\";" >> ${TMPFILE}
		if [ -n "${srvlist}" -a -r "${srvlist}" ]; then
			${CAT_CMD} ${srvlist} >> ${TMPFILE}
			${RM_CMD} -f ${srvlist}
		fi
	fi

	# end of additional area
	# pkg bootstrap && user accounting
	postcreate_module_action ${tmpjname} ${TMPFILE}

	${RM_CMD} -f ${TMPFILE}
	jcleanup jname=${tmpjname}

	JAILRCCONF="${jailrcconfdir}/rc.conf_${tmpjname}"
	# make sure jail is offline 
	jstop jname=${tmpjname} > /dev/null 2>&1
	junregister jname=${tmpjname}
	[ -f "${JAILRCCONF}" ] && ${RM_CMD} -f ${JAILRCCONF}
}

# MAIN
jcleanup jname=${jname}
clear_tmp_dir
[ ${baserw} -eq 1 ] && path=${data}

[ "${prunelist}" != "0" ] && prunelist="${sharedir}/jail2iso-prunelist"
if [ "${nobase}" != "1" ]; then
	[ ! -d "${BASE_DIR}" ] && err 1 "${N1_COLOR}No base data on: ${N2_COLOR}${BASE_DIR}${N0_COLOR}"
fi

case "${media}" in
	iso)
		make_ufs
		[ -z "${dstname}" ] && dstname="${jname}-${ver}_${arch}.iso"
		/usr/local/cbsd/release/mkisoimages.sh -l ${LABEL} -n ${dstdir}/${dstname} -d ${TMP_DIR} -e ${efi}
		;;
	memstick)
		make_ufs
		[ -z "${dstname}" ] && dstname="${jname}-${ver}_${arch}.img"

		${MAKEFS_CMD} -B little -o version=2 -o label=${LABEL} ${dstdir}/${dstname}.part ${TMP_DIR}
		[ $? -ne 0 ] && err 1 "makefs failed"

		# use mkimg on 10.1+ and gpart+mbr for 10.0-
		if [ ${freebsdhostversion} -lt 1000730 ]; then
			##
			unit=$( ${MDCONFIG_CMD} -a -t vnode -f ${dstdir}/${dstname} )
			[ $? -ne 0 ] && err 1 "mdconfig failed"
			${GPART_CMD} create -s BSD ${unit}
			${GPART_CMD} bootcode -b ${TMP_DIR}/boot/boot ${unit}
			${GPART_CMD} add -t freebsd-ufs ${unit}
			${MDCONFIG_CMD} -d -u ${unit}
		else
			if [ ${efi} -eq 1 ]; then
				${MKIMG_CMD} -s gpt -b ${TMP_DIR}/boot/pmbr -p efi:=${TMP_DIR}/boot/boot1.efifat -p freebsd-boot:=${TMP_DIR}/boot/gptboot -p freebsd-ufs:=${dstdir}/${dstname}.part -p freebsd-swap::1M -o ${dstdir}/${dstname}
			else
				${MKIMG_CMD} -s gpt -b ${TMP_DIR}/boot/pmbr -p freebsd-boot:=${TMP_DIR}/boot/gptboot -p freebsd-ufs:=${dstdir}/${dstname}.part -p freebsd-swap::1M -o ${dstdir}/${dstname}
			fi
			${RM_CMD} -f ${dstdir}/${dstname}.part
		fi

		${ECHO} "${N1_COLOR}Now you can burn image to USB memstick via\n ${N2_COLOR}dd if=${dstdir}/${dstname} of=/dev/da${W2_COLOR}X${N2_COLOR} bs=1m conv=\"sync\"${N0_COLOR}"
		;;
	bhyve|livecd)
		[ -z "${dstname}" ] && dstname="${jname}-${ver}_${arch}.img"
		# bad behaviour of makefs: http://www.freebsd.org/cgi/query-pr.cgi?pr=188762
		#	makefs -o version=2 -o label="${LABEL}" ${dstdir}/${dstname} ${TMP_DIR}

		if [ "${vm_guestfs}" = "ufs" ]; then
			# create_img_for_dir /usr/jails/tmp/jail1-iso.94915 /tmp/jail1-12.1_amd64.img
			echo "[debug] create_img_for_dir ${TMP_DIR} ${dstdir}/${dstname}"
			create_img_for_dir ${TMP_DIR} ${dstdir}/${dstname}
			echo "[debug] done"
		else
			create_img_for_dir ${data} ${dstdir}/${dstname}
		fi

		if [ "${swapsize}" != "0" ]; then
			if conv2human "${swapsize}"; then
				swapsize=${convval}
			fi
		fi

		if [ "${fs_size}" != "0" ]; then
			if conv2human "${fs_size}"; then
				fs_size=${convval}
			fi
		fi

		unit=$( ${MDCONFIG_CMD} -a -t vnode -f ${dstdir}/${dstname} )

		[ $? -ne 0 ] && err 1 "mdconfig failed"
		${ECHO} "${N1_COLOR}guest os: ${vm_guestfs}${N0_COLOR}"

		case "${vm_guestfs}" in
			ufs)
				echo "[debug] make_ufs"
				make_ufs
				echo "[debug] done"
				${ECHO} "${N1_COLOR}gpart create...${N0_COLOR}"
				${GPART_CMD} create -s gpt ${unit}
				#${ECHO} "${N1_COLOR}gpart freebsd-boot...${N0_COLOR}"
				#${GPART_CMD} add -t freebsd-boot -l gpboot -b 40 -s 512K ${unit}	# p1
				${ECHO} "${N1_COLOR}gpart efi...${N0_COLOR}"
				${GPART_CMD} add -t efi -s ${EFI_PART_SIZE} ${unit}	# p1

#				if [ ${efi} -eq 1 ]; then
#				${MKIMG_CMD} -s gpt -b ${TMP_DIR}/boot/pmbr -p efi:=${TMP_DIR}/boot/boot1.efifat -p freebsd-boot:=${TMP_DIR}/boot/gptboot -p freebsd-ufs:=${dstdir}/${dstname}.part -p freebsd-swap::1M -o ${dstdir}/${dstname}
#			else
#				${MKIMG_CMD} -s gpt -b ${TMP_DIR}/boot/pmbr -p freebsd-boot:=${TMP_DIR}/boot/gptboot -p freebsd-ufs:=${dstdir}/${dstname}.part -p freebsd-swap::1M -o ${dstdir}/${dstname}
#			fi

				${ECHO} "${N1_COLOR}gpart bootcode...${N0_COLOR}"
				${GPART_CMD} bootcode -b ${TMP_DIR}/boot/pmbr -p ${TMP_DIR}/boot/gptboot -i 1 ${unit}
				# bug? not more than 9g?
				${ECHO} "${N1_COLOR}gpart freebsd-ufs...${N0_COLOR}"

#				echo "${GPART_CMD} add -t freebsd-ufs -l ${LABEL} -s ${fs_size} ${unit}"
#				ufspart=$( ${GPART_CMD} add -t freebsd-ufs -l ${LABEL} -s ${fs_size} ${unit} | ${AWK_CMD} '/ added/{print $1}' )		# p2
# no label: cloud init  doesnt like: /dev/dev/gpt/label
				echo "${GPART_CMD} add -t freebsd-ufs -s ${fs_size} ${unit}"
				ufspart=$( ${GPART_CMD} add -t freebsd-ufs -s ${fs_size} ${unit} | ${AWK_CMD} '/ added/{print $1}' )		# p2

				[ -z "${ufspart}" ] && err 1 "${N1_COLOR}unable to determine ufspart${N0_COLOR}"

				if [ "${swapsize}" != "0" ]; then
					${ECHO} "${N1_COLOR}gpart freebsd-swap...${N0_COLOR}"
					${GPART_CMD} add -t freebsd-swap -l swap ${unit}		# p3
				fi

				${ECHO} "${N1_COLOR}stamp efiboot...${N0_COLOR}"

				${NEWFS_MSDOS_CMD} -F 32 -c 1 /dev/${unit}p1

				_ret=$?
				[ ${_ret} -ne 0 ] && err 1 "${N1_COLOR}unable to newfs_msdos ${unit}p1${N0_COLOR}"

				tdir=$( ${MKTEMP_CMD} -d )
				${MOUNT_CMD} -t msdosfs /dev/${unit}p1 ${tdir}

				_ret=$?
				[ ${_ret} -ne 0 ] && err 1 "${N1_COLOR}unable to mount ${unit}p1 -> ${tdir}${N0_COLOR}"

				${MKDIR_CMD} -p ${tdir}/EFI/BOOT
				${CP_CMD} -a /boot/loader.efi ${tdir}/EFI/BOOT/BOOTX64.efi
				${UMOUNT_CMD} ${tdir}

				if [ -z "${ufspart}" ]; then
					${ECHO} "${N1_COLOR}${MDCONFIG_CMD} -d -u ${unit}...${N0_COLOR}"
					${MDCONFIG_CMD} -d -u ${unit}
					err 1 "Can't create UFS part for ${unit}"
				fi

				echo "${NEWFS_CMD} -U -n -L "${LABEL}" /dev/${ufspart}"
				${NEWFS_CMD} -U -n -L "${LABEL}" /dev/${ufspart}
				tdir=$( ${MKTEMP_CMD} -d )

				${MOUNT_CMD} /dev/${ufspart} ${tdir}
				echo "[debug] cd ${TMP_DIR} && nice -n 19 ${IDPRIO_CMD} 29 ${PAX_CMD} -p eme -rw . ${tdir}"
				cd ${TMP_DIR} && nice -n 19 ${IDPRIO_CMD} 29 ${PAX_CMD} -p eme -rw . ${tdir}
				sync
				echo "[debug] done"
				${UMOUNT_CMD} ${tdir} && ${RMDIR_CMD} ${tdir}
				# mkimg -s gpt -b ${1}/boot/pmbr -p efi:=${1}/boot/boot1.efifat -p freebsd-boot:=${1}/boot/gptboot -p freebsd-ufs:=${2}.part -p freebsd-swap::1M -o ${2}
				# mkimg -s gpt -b ${TMP_DIR}/boot/pmbr -p efi:=${TMP_DIR}/boot/boot1.efifat -p freebsd-boot:=${TMP_DIR}/boot/gptboot -p freebsd-ufs:=${dstdir}/${dstname} -p freebsd-swap::1M -o ${tmpdir}/test.img
				;;
			zfs)
				bhyve_zfs_install
				;;
		esac

		mynic=$( getnics-by-ip ip=0.0.0.0 2>/dev/null skip=bridge )
		[ -z "${mynic}" ] && mynic="em0"
		[ ${quiet} -eq 0 ] && show_bhyve_message
		${MDCONFIG_CMD} -d -u ${unit}
		;;
	*)
		err 1 "${N1_COLOR}unknown media, valid: ${N2_COLOR}iso${N1_COLOR}, ${N2_COLOR}memstick ${N1_COLOR}or ${N2_COLOR}bhyve${N0_COLOR}"
esac

[ "${ver}" != "empty" ] && unmountfstab jroot=${path} fstab=${mount_fstab} > /dev/null 2>&1

jcleanup jname=${jname}
