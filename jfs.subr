if [ ! "$_CBSD_JFS_SUBR" ]; then
_CBSD_JFS_SUBR=1
###

. ${zfstool}

# movedata $1-from $2-to
mvdata()
{
	local _src _dst _ret _zfsfeat
	[ -z "$1" -o -z "$2" ] && err 1 "mvdata: empty arguments"

	_src=${1}
	_dst=${2}

	[ -d "${_dst}" ] && err 1 "${_dst} directory exist. Please remove them first"

	# is symlink? in this case zfsfeat=0, just move symlink
	if [ -h ${_src} ]; then
		_zfsfeat=0
	else
		_zfsfeat="${zfsfeat}"
	fi

	if [ "${_zfsfeat}" = "0" ]; then
		${MV_CMD} ${_src} ${_dst}
		_ret=$?
		return ${_ret}
	fi

	zfsmnt "${_realsrc}"
	_res=$?

	readconf zfs.conf

	case ${_res} in
		0)
			echo "Switch to ZFS pool"
			zfsmnt ${workdir}
			/sbin/zfs create ${zfs_create_flags} -o mountpoint=${_dst} "${ZPOOL}${_dst}"
			/sbin/zfs mount "${ZPOOL}${_dst}"
			/bin/mkdir ${_dst}
			cd ${_src} && /bin/pax -p eme -rw . ${_dst} && ${CHFLAGS_CMD} -R noschg ${_src} && /bin/rm -rf ${_src}
		;;
		1)
			/sbin/zfs umount -f ${_src} > /dev/null 2>&1
			/sbin/zfs set mountpoint=${_dst} ${ZPOOL}
			/sbin/zfs mount ${ZPOOL}
			/bin/rmdir ${_src}
		;;
		2)
			/sbin/zfs set mountpoint=${_dst} ${ZPOOL}
			/sbin/zfs mount ${ZPOOL}
			/bin/rmdir ${_src}
		;;
	esac

	return 0
}


# clone data
# -d <path> - destination dir
# -f - force (no check for dir exist)
# -j - newjname
# -m <mode> - mode: cp, rsync, rsyncforce, zfs, zfspromote
# -n <new_name> - name of the clone for zfs/zfspromote method, e.g: $newjname variable
#		it was as cbsd-original-$new_name snapshot
# -p ${promote} - promote ZFS 0,1: ( 0 - promote)
# -s <path> - source dir
# e.g: clonedata -s /usr/jails/jails-data/jail1-data -d /mn -m rsync
clonedata()
{
	local _src _dst _mode _go _force _zpool _name _res _jname _orig_mode
	local _dskname

	_force=0

	while getopts "d:fj:m:n:p:s:" opt; do
		case "$opt" in
			d) _dst="${OPTARG}" ;;
			f) force=1 ;;
			m) _mode="${OPTARG}" ;;
			n) _new_name="${OPTARG}" ;;
			p) _promote="${OPTARG}" ;;
			s) _src="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	[ -z "${_dst}" ] && log_err 1 "${N1_COLOR}clonedata: empty ${N2_COLOR}dst${N0_COLOR}"
	[ -z "${_mode}" ] && log_err 1 "${N1_COLOR}clonedata: empty ${N2_COLOR}mode${N0_COLOR}"
	[ -z "${_src}" ] && log_err 1 "${N1_COLOR}clonedata: empty ${N2_COLOR}src${N0_COLOR}"
	[ -z "${jname}" ] && log_err 1 "${N1_COLOR}clonedata: no jname${N0_COLOR}"
	[ -z "${_new_name}" ] && _new_name="${jname}"
	[ -z "${_promote}" ] && _promote="0"

	# save original clone method
	_orig_mode="${_mode}"

	[ -d "${_dst}" -a ${_force} -eq 0 ] && log_err 1 "${N1_COLOR}clonedata: ${N2_COLOR}${_dst}${N1_COLOR} directory exist. Please remove them${N0_COLOR}"

	# default_vm_zvol_volblocksize etc...
	readconf zfs.conf

	# check for ZFS clone possibility and create snapshot
	case "${_mode}" in
		zfs|zfspromote)
			[ ${zfsfeat} -ne 1 ] && log_err 1 "${N1_COLOR}clonedata: zfs clone method but zfsfeat=0${N0_COLOR}"
			[ -z "${_new_name}" ] && log_err 1 "${N1_COLOR}clonedata: empty -n new_name of the snapshot${N0_COLOR}"

			zfsmnt "${_src}"
			_res=$?
			case "${_res}" in
				0)
					# not valid ZFS mp, force non-zfs clone method
					cbsdlogger NOTICE ${CBSD_APP}: force to rsync clone method, not ZFS mount point: ${_src}
					${ECHO} "${N1_COLOR}Force to rsync clone method, not ZFS mount point: ${N2_COLOR}${_src}${N0_COLOR}"
					_mode="rsync"
					;;
				1|2)
					local _origdata=$( /sbin/zfs get -Ho value name ${_src} 2>/dev/null )
					if [ -z "${_origdata}" ]; then
						${ECHO} "${N1_COLOR}${_src} is not ZFS dataset, force to rsync clone method${N0_COLOR}"
						cbsdlogger NOTICE ${CBSD_APP}: ${_src} is not ZFS dataset, force to rsync clone method
						_mode="rsync"
					else
						local _createtime=$( ${DATE_CMD} "+%Y%m%d%H%M%S" )
						cbsdlogger NOTICE ${CBSD_APP}: clonedata: zfs snapshot ${_origdata}@cbsd-original-${_new_name}
						/sbin/zfs snapshot ${_origdata}@cbsd-original-${_new_name}
						/sbin/zfs set cbsdsnap:jname=${_new_name} ${_origdata}@cbsd-original-${_new_name}
						/sbin/zfs set cbsdsnap:snapname="${_origdata}" ${_origdata}@cbsd-original-${_new_name}
						create_zfs_fs -d "${_src}" -m "${_dst}" -n "${_new_name}" -p ${_promote} -z "${_origdata}@cbsd-original-${_new_name}"
					fi
					;;
				*)
					log_err 1 "${N1_COLOR}clonedata: unknown code for: zfsmnt ${_src}${N0_COLOR}"
					;;
			esac
	esac

	case "${_mode}" in
		"cp")
			_go="/bin/cp -Rp "
			;;
		"rsync")
			_go="/usr/local/bin/rsync -avzz --devices --numeric-ids --delete --recursive --partial "
			;;
		"rsyncforce")
			_go="/usr/local/bin/rsync -avzz --devices --numeric-ids --delete --recursive --partial "
			_force=1
			;;
		zfs|zfspromote)
			[ -n "${_name}" ] && log_err 1 "${N1_COLOR}clonedata: empty -n name of the snapshot${N0_COLOR}"
			unset _go
			;;
		*)
			log_err 1 "clonedata: unsupported mode: ${_mode}"
			;;
	esac

	cbsdlogger NOTICE ${CBSD_APP}: clonedata mode selected: ${_mode}

	# create directory and copy data via rsync/copy method
	if [ -n "${_go}" ]; then
		if [ ! -d "${_dst}" ]; then
			if [ ${zfsfeat} -eq 1 ]; then
				_zpool=$( /sbin/zfs list ${jaildatadir} | /usr/bin/tail +2 | ${AWK_CMD} '{printf $1}' )
				/sbin/zfs create ${zfs_create_flags} -o mountpoint=${_dst} ${_zpool}/${jname}
				. ${system}	# for is_mounted
				if ! is_mounted ${_zpool}/${jname}; then
					cbsdlogger NOTICE ${CBSD_APP}: zfs not mounted, mount: ${_zpool}/${jname}
					/sbin/zfs mount ${_zpool}/${jname}
				fi
			else
				/bin/mkdir -p ${_dst}
			fi
		fi

		cbsdlogger NOTICE ${CBSD_APP}: clonedata: ${_go} ${_src}/* ${_dst}/
		${_go} ${_src}/* ${_dst}/
	fi

	# additional loop to check for symlink and zvol
	if [ ${zfsfeat} -eq 1 ]; then
		for i in $( /usr/bin/find ${_dst}/ -type l -depth 1 -maxdepth 1 ); do
			if is_getzvol ${i}; then
				_dskname=$( /usr/bin/basename ${i} )
				imgbytes=$( /sbin/zfs get -Hp -o value volsize ${is_zvol} )
				# create_bhyvedsk ?
#				DATA=$( /sbin/zfs get -Ho value name ${jaildatadir} )
				new_zvol=$( echo ${is_zvol} | ${SED_CMD} s:${old}:${new}:g )

				case "${_orig_mode}" in
					zfs|zfspromote)
						local _createtime=$( ${DATE_CMD} "+%Y%m%d%H%M%S" )
						cbsdlogger NOTICE ${CBSD_APP}: clonedata: create zfs snapshot: ${is_zvol}@cbsd-original-${_new_name}-${_dskname}
						# this command produces ZFS WARNING: Unable to create ZVOL in syslog messages
						/sbin/zfs snapshot ${is_zvol}@cbsd-original-${_new_name}-${_dskname}
						/sbin/zfs set cbsdsnap:jname=${_new_name} ${is_zvol}@cbsd-original-${_new_name}-${_dskname}
						/sbin/zfs set cbsdsnap:snapname="${_origdata}" ${is_zvol}@cbsd-original-${_new_name}-${_dskname}
						cbsdlogger NOTICE ${CBSD_APP}: clonedata: clone zfs snapshot: ${is_zvol}@cbsd-original-${_new_name}-${_dskname} to ${new_zvol}
						/sbin/zfs clone -o volmode=dev -p ${is_zvol}@cbsd-original-${_new_name}-${_dskname} ${new_zvol}
#						create_zfs_fs -d "${_src}" -n "${_new_name}" -p ${_promote} -z "${is_zvol}@cbsd-original-${_new_name}-${_dskname}"
						;;
					*)
						_zvol_opts=
						# lookup for "default_vm_zvol_*" defaults
						for i in ${default_vm_zvol_managed_feature}; do
							eval _def_val="\$default_vm_zvol_$i"
							if [ -n "${_def_val}" ]; then
								if [ -z "${_zvol_opts}" ]; then
									_zvol_opts="-o ${i}=${_def_val}"
								else
									_zvol_opts="${_zvol_opts} -o ${i}=${_def_val}"
								fi
							fi
						done

						/sbin/zfs create -V ${imgbytes} ${_zvol_opts} ${new_zvol}
						/bin/dd if=/dev/zvol/${is_zvol} of=/dev/zvol/${new_zvol} bs=1g
						;;
				esac
				cbsdlogger NOTICE ${CBSD_APP}: clonedata: create ${i} symlink to ZVOL: /dev/zvol/${new_zvol}
				/bin/ln -sf /dev/zvol/${new_zvol} ${i}
			fi
		done
	fi

	for i in $( /usr/bin/find ${_dst}/ -type l -or -type f -depth 1 -maxdepth 1 -name dsk\* ); do
		mydsk=$( /usr/bin/basename ${i} );
		[ -z "${mydsk}" ] && continue
		media mode=register name="hdd-${mydsk}" path="${i}" type="hdd" jname="${jname}"
	done

}

# remove data from disk
# $jname must be set
# if "$2" = "force" then force to remove non-empty dir
removedata()
{
	local _data _test _res _jaildatadir ZPOOL _jailfs data

	[ -z "${1}"  ] && err 1 "removedata: empty arguments"
	[ -z "${jname}"  ] && err 1 "removedata: jname variable must be set"

	data="${1}"

	_data=$( ${REALPATH_CMD} ${data} )

	[ ! -d "${_data}" ] && return 0

	if [ "${zfsfeat}" = "1" ]; then
		case "${emulator}" in
			bhyve|xen)
				for i in $( /usr/bin/find ${_data}/ -type l -depth 1 -maxdepth 1 ); do
					if is_getzvol ${i}; then
						#echo "/sbin/zfs destroy ${is_zvol} (for is_getzvol ${i})"
						/sbin/zfs destroy ${is_zvol}
					fi
					/bin/rm -f ${i}
				done
				;;
			*)
				;;
		esac

		# extra check if zfs still exist
		_jaildatadir=$( ${REALPATH_CMD} ${jaildatadir} )
		ZPOOL=$( /sbin/zfs get -Ho value name ${_jaildatadir} 2>/dev/null )
		if [ -n "${ZPOOL}" ]; then
			local _jailfs="${ZPOOL}/bcbsd-${jname}-dsk1.vhd ${ZPOOL}/${jname}"		# back compatible for CBSD <=12.0.14
			local i
			for i in ${_jailfs}; do
				for try in 1 2 3; do
					# workaround for dataset busy, give the pause with three attempts
					/sbin/zfs list ${i} >/dev/null 2>/dev/null
					if [ $? -eq 0 ]; then
						sleep 1
						/sbin/zfs destroy ${i} > /dev/null 2>&1
					fi
				done
			done
		fi

		unmountdata ${_data}
		[ -d "${_data}" ] && /bin/rm -rf ${_data}
	elif [ "${hammerfeat}" = "1" ]; then
		destroy_hammer_fs ${jname}
	else
		if [ "$2" = "force" ]; then
			${CHFLAGS_CMD} -R noschg ${_data}
			/bin/rm -rf ${_data}
		else
			/bin/rmdir ${_data}
		fi
	fi

	# $1 - original dst
	[ -h "${data}" ] && /bin/rm -f ${data}
	[ -d "${data}" ] && /bin/rmdir ${data}
	[ -d "${_data}" ] && err 1 "${N1_COLOR}Directory not empty or busy: ${_data}${N0_COLOR}"
	return 0
}


# unmount if mount
unmountdata()
{
	local _data

	[ -z "$1" ] && err 1 "unmountdata: no arguments"
	_data=$1

	[ ! -d "${_data}" ] && return 1

	zfsmnt ${_data}

	if [ $? -eq 1 ]; then
		/sbin/zfs unmount -f ${_data}
		rmdir ${_data}
	fi
}


create_fs()
{
	local data="${1}"

	[ -z "${data}" ] && return 0

	if [ "${zfsfeat}" = "1" ]; then
		create_zfs_fs -d ${data}
	elif [ "${hammerfeat}" = "1" ]; then
		create_hammer_fs ${jname}
	else
		[ ! -d ${data} ] && /bin/mkdir -p ${data}
	fi
}


# -d data
# -m mount_point, can be: none
# -n - jail_name
# -p promote fs ( 0 or 1 )
# -z zfs_snapsrc
create_zfs_fs()
{
	local _data _mount_point _name _promote _zfs_snapsrc

	while getopts "d:m:n:p:z:" opt; do
		case "${opt}" in
			d) _data="${OPTARG}" ;;
			m) _mount_point="${OPTARG}" ;;
			n) _name="${OPTARG}" ;;
			p) _promote="${OPTARG}" ;;
			z) _zfs_snapsrc="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	local res

	[ -z "${_data}" ] && return 0
	[ -z "${_name}" ] && _name="${jname}"
	[ -n "${zfs_snapsrc}" ] && _zfs_snapsrc="${zfs_snapsrc}"
	[ -z "${_promote}" ] && _promote=0

	local ZPOOL

	ZPOOL=$( /sbin/zfs get -Ho value name ${jaildatadir} )

	if zfsroot ${_name}; then
		log_err 1 "create_zfs_fs: ${ZPOOL}/${_name} already in use"
	fi

	if [ -z "${_zfs_snapsrc}" ]; then
		res=$( /sbin/zfs create ${zfs_create_flags} -o mountpoint=${_data} ${ZPOOL}/${_name} 2>&1 )
		[ $? -ne 0 ] && log_err 1 "${N1_COLOR}create_zfs_fs: zfs create failed: ${res}. No ZFS and zfsfeat=1?${N0_COLOR}"
		cbsdlogger NOTICE ${CBSD_APP}: create_zfs_fs: ZFS ${ZPOOL}/${_name} has been created with mountpoint: ${_data}, opt: ${zfs_create_flags}
	else
		/sbin/zfs clone -p ${_zfs_snapsrc} ${ZPOOL}/${_name}
		[ $? -ne 0 ] && log_err 1 "${N1_COLOR}create_zfs_fs: zfs clone failed: ${res}${N0_COLOR}"
		cbsdlogger NOTICE ${CBSD_APP}: ZFS cloned: ${_zfs_snapsrc} to ${ZPOOL}/${_name}

		if [ "${_mount_point}" != "none" ]; then
			if [ -n "${_mount_point}" ]; then
				/sbin/zfs set mountpoint=${_mount_point} ${ZPOOL}/${_name}
			else
				/sbin/zfs set mountpoint=${_data} ${ZPOOL}/${_name}
			fi
		fi
	fi

	if [ ${_promote} -eq 1 ]; then
		${ECHO} "${N1_COLOR}ZFS promoting for: ${N2_COLOR}${ZPOOL}/${_name}${N0_COLOR}"
		cbsdlogger NOTICE ${CBSD_APP}: zfs promoting for: ${ZPOOL}/${_name}
		/sbin/zfs promote ${ZPOOL}/${_name}
	fi

	return 0
}


#  create_hammer_fs jails
create_hammer_fs()
{
	[ -z "${1}" ] && return 1
	local dname="${1}"

	/sbin/hammer pfs-master ${jaildatadir}/${dname}-${jaildatapref}
}

#  destroy_hammer_fs jails
destroy_hammer_fs()
{
	[ -z "${1}" ] && return 1
	local dname="${1}"

	/sbin/hammer -y pfs-destroy ${jaildatadir}/${dname}-${jaildatapref}
}

###
fi
