if [ ! "$_CBSD_FETCH_SUBR" ]; then
_CBSD_FETCH_SUBR=1
###

# Wrapper for fetch and dpv
# fetchme -u URL -o /tmp/out
# -d - try dpv - 0,1 (1 by default)
# use optional TF variable for output ( legacy from repo )
# require: cbsdsh as shell
#    include: tools for humanize, DIALOG env for dpv
fetchme()
{
	local _res

	local _out="${TF}"
	local _quiet=0
	local _url=
	local _TONULL
	local _filename
	local _fromrepo
	local _fetch_current_retry
	local _try_dpv=1

	# global variable. Need for most dialog-based action
	[ -n "${quiet}" ] && _quiet="${quiet}"

	while getopts "d:u:q:o:" opt; do
		case "${opt}" in
			d) _try_dpv="${OPTARG}" ;;
			u) _url="${OPTARG}" ;;
			q) _quiet="${OPTARG}" ;;
			o) _out="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	[ -z "${_url}" ] && echo "Empty URL" && return 1

	# global settings
	readconf fetch.conf

	local _sizebyte=
	local _humansize=
	# We use size output for non-quiet and for dpv(1) mode
	[ ${_quiet} -eq 0 ] && _sizebyte=$( ${FETCH_CMD} -qs ${_url} 2>/dev/null | ${AWK_CMD} '{printf $1}' )

	# test for human
	if [ -n "${_sizebyte}" ]; then
		if ! is_number ${_sizebyte}; then
			if conv2human "${_sizebyte}"; then
				local _humansize="${convval}"
			else
				unset _sizebyte
			fi
		else
			unset _sizebyte
		fi
	fi

	[ ! -r "${DPV_CMD}" ] && _try_dpv=0
	[ -z "${DIALOG}" ] && _try_dpv=0

	if [ ${_quiet} -eq 1 ]; then
		_try_dpv=0
		fetch_opts="${fetch_opts} -q"
	fi

	[ ${_try_dpv} -eq 0 ] && unset DPV_CMD

	_filename=$( ${BASENAME_CMD} ${_url} 2>&1 )
	[ -z "${_filename}" ] && _filename="Resource"
	_fromrepo=$( echo ${_url} | ${CUT_CMD} -d "/" -f 3 )

	if [ -r ${_out}.lock ]; then
		${ECHO} "${N1_COLOR} cbsd fetch: lock file exists, another instance is fetching the same? ${N2_COLOR}${_out}.lock${N0_COLOR}"
		return 1
	fi

	[ -z ${fetch_max_retry} ] && fetch_max_retry=0

	if is_number ${fetch_max_retry}; then
		# not number?
		${ECHO} "${N1_COLOR}fetch_max_retry not number: ${N2_COLOR}${fetch_max_retry}${N1_COLOR}? reset to 0${N0_COLOR}"
		fetch_max_retry=0
	fi

	if [ ${fetch_max_retry} -eq 0  ]; then
		_fetch_current_retry=-1
	else
		_fetch_current_retry=0
	fi

	_res=1

	while [ ${_fetch_current_retry} -lt ${fetch_max_retry} ]; do
		_fetch_current_retry=$(( _fetch_current_retry + 1 ))
		if [ -n "${DPV_CMD}" -a ${_try_dpv} -eq 1 ]; then
			${LOCKF_CMD} -s -t0 ${_out}.lock ${FETCH_CMD} ${fetch_opts} -q -o '-' ${_url} | ${DPV_CMD} -b "${product}" -p "fetching from ${_fromrepo}:" -t " fetching " -x "${CAT_CMD} > ${_out}" ${_sizebyte}:${_filename}
			# check for size, cause "fetch | dpv " is always true
			if [ -s "${_out}" ]; then
				_res=0
			else
				${RM_CMD} -f ${_out}
				_res=1
			fi
		else
			[ -n "${_humansize}" ] && ${ECHO} "${N1_COLOR}retrieve ${H5_COLOR}${_filename}${N1_COLOR} from ${H3_COLOR}${_fromrepo}${N1_COLOR}, size: ${N2_COLOR}${_humansize}${N0_COLOR}"
			${LOCKF_CMD} -s -t0 ${_out}.lock ${FETCH_CMD} ${fetch_opts} -o ${_out} ${_url} ${_TONULL}
			_res=$?
		fi

		# success of interrupted
		[ ${_res} -eq 0 ] && break
		[ -z "${DPV_CMD}" ] && ${ECHO} "${N1_COLOR}retry: ${N2_COLOR}${_fetch_current_retry}/${fetch_max_retry}${N0_COLOR}"
	done

	return ${_res}
}

# -s sources
# -t timeout
# -u test_url/file
# scan_fastest_mirror -s "mirror1 mirror2" -t 3 -u "/base.txz"

scan_fastest_mirror()
{
	local _src_mirror
	local _test_file="${2}"
	local _timeout=3
	local _mirror_num
	local max_url_len=0
	local cur_url_len=0
	local free_len=0
	local win_rate=0
	local _stimeout _htimeout

	while getopts "s:u:t:" opt; do
		case "${opt}" in
			s) _src_mirror="${OPTARG}" ;;
			t) _timeout="${OPTARG}" ;;
			u) _test_file="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	[ -z "${_src_mirror}" ] && err 1 "scan_fastest_mirror: empty src_mirror"
	_mirror_num=$( echo "${_src_mirror}" | ${WC_CMD} -w | ${AWK_CMD} {'printf $1'} )

	[ -z "${_test_file}" ] && err 1 "scan_fastest_mirror: empty test_file"

	# soft timeout
	_stimeout="${_timeout}"

	# hard timeout
	_htimeout=$(( _stimeout + 1 ))

	# determine longest url
	for i in ${_src_mirror}; do
		cur_url_len=$( strlen ${i} )
		[ ${cur_url_len} -gt ${max_url_len} ] && max_url_len=${cur_url_len}
	done

	max_url_len=$(( max_url_len + 1 ))
	for i in ${_src_mirror}; do
		_mirror_cur=$(( _mirror_cur + 1 ))
		cur_url_len=$( strlen ${i} )
		free_len=$(( max_url_len - cur_url_len ))
		printf " ${H1_COLOR}* ${H2_COLOR}[ %-5s ] ${N2_COLOR}${i}${N0_COLOR}:%-${free_len}s" ${_mirror_cur}/${_mirror_num}
		t_size=$( ${TIMEOUT_CMD} -s KILL ${_htimeout} ${TIMEOUT_CMD} -s HUP ${_stimeout} ${bindir}/cfetch -s 1 -o /dev/null -u ${i}${_test_file} 2>/dev/null )
		if [ -z "${t_size}" ]; then
			${ECHO} "${W1_COLOR}failed${N0_COLOR}"
		else
			${ECHO} "${H5_COLOR}${t_size}${N0_COLOR}"
			if ! is_number ${t_size}; then
				if [ ${t_size} -gt ${win_rate} ]; then
					win_rate=${t_size}
					win_mirror="${i}"
				fi
			else
				${ECHO} "${W1_COLOR}failed, no size${N0_COLOR}"
			fi
		fi
	done
	[ -n "${win_mirror}" ] && ${ECHO} "${H3_COLOR} Winner: ${N2_COLOR}${win_mirror}${N0_COLOR}"
	FASTEST_SRC_MIRROR="${win_mirror} ${_src_mirror}"
}

###
fi
