#!/usr/local/bin/cbsd
#v11.0.6
MYARG=""
MYOPTARG="ver rev scmbase dst patch"
MYDESC="Update FreeBSD source tree in $srcdir"
ADDHELP="ver=head for current.\n\
rev=XXX where XXX - svn revision\n\
scmbase - alternative svn base URL\n\
dst - alternative dst dir\n\
patchset=apply patchet\n"

. ${subr}

readconf srcup.conf
readconf srcup-${platform}.conf
unset ver arch stable

. ${cbsdinit}

if [ "${mod_cbsd_queue_enabled}" = "YES" -a -z "${MOD_CBSD_QUEUE_DISABLED}" ]; then
	readconf cbsd_queue.conf
	[ -z "${cbsd_queue_backend}" ] && MOD_CBSD_QUEUE_DISABLED="1"
fi

over="${ver}"
oarch="${arch}"

init_svn()
{
	SCM=""

	if [ -f "/usr/bin/svnlite" ]; then
		SCM="/usr/bin/svnlite"
	elif [ -f "/usr/local/bin/svn" ]; then
		SCM="/usr/local/bin/svn"
	else
		err 1 "${N1_COLOR}No svn in the base. Please install devel/subversion${N0_COLOR}"
	fi

	[ -z "${scmbase}" ] && scmbase="${SVNBASE}"

	if [ "${stable}" = "1" ]; then
		SCM_URL="${scmbase}/stable/${ver}"
	else
		SCM_URL="${scmbase}/releng/${ver}"
	fi

	if [ "${ver}" = "13.0" -o "${ver}" = "13" ]; then
		SCM_URL="${scmbase}/head"
	fi

	return 0
}

init_git()
{
	SCM=""

	if [ -f "/usr/local/bin/git" ]; then
		SCM="/usr/local/bin/git"
	else
		err 1 "${N1_COLOR}No git in the base. Please install: ${N2_COLOR}pkg install -y devel/git${N0_COLOR}"
	fi

	if [ -z "${scmbase}" ]; then
		[ -z "${GITBASE}" ] && err 1 "${N1_COLOR}Empty GITBASE variable. Please specify GITBASE via ${N2_COLOR}srcup.conf${N0_COLOR}"
		scmbase="${GITBASE}"
	fi
	SCM_URL="${scmbase}"

	[ -d "${dst}/.git" ] && return 0
	set -o xtrace

	cd ${dst} && ${SCM} init
	${SCM} remote add origin ${SCM_URL}
	${SCM} fetch ${git_flags} origin

	set +o xtrace
	return 0
}

svn_checkout()
{
	local _ret=0
	local _srcdir

	_srcdir=$( ${REALPATH_CMD} ${dst} )

	# repair and upgrade
	if [ -d "${_srcdir}/.svn" ]; then
		cd ${_srcdir}
		${ECHO} "${N1_COLOR}Processing svn cleanup, please wait...${N0_COLOR}"
		${SCM} cleanup
	fi
	${ECHO} "${N1_COLOR}Processing svn update...${N0_COLOR}"
	cbsdlogger NOTICE ${CBSD_APP}: processing svn update: ${SCM} checkout -r ${rev} ${SCM_URL} ${_srcdir}
	echo "${SCM} checkout -r ${rev} ${SCM_URL} ${_srcdir}"
	${SCM} checkout -r ${rev} ${SCM_URL} ${_srcdir}
	_ret=$?
}

git_checkout()
{
	local _depth _branch
	local _ret=0

	[ "${depth}" != "0" ] && _depth="${depth}"

	[ ! -f ${sharedir}/${platform}-git_branches.conf ] && err 1 "${N1_COLOR}No ${sharedir}/${platform}-git_branches.conf for git branch map${N0_COLOR}"
	. ${sharedir}/${platform}-git_branches.conf

	if [ -z "${GITBRANCH}" ]; then
		_branch=$( init_git_branch )
	else
		_branch="${GITBRANCH}"
	fi

	[ -z "${_branch}" ] && err 1 "${N1_COLOR}Empty branch from init_git_branch${N0_COLOR}"

	${ECHO} "${N1_COLOR}Selected branch: ${N2_COLOR}${_branch}${N0_COLOR}"

	if [ -d "${dst}/.git" ]; then
		echo "cd ${dst} && ${SCM} ${git_flags} branch ${_branch}"
		cbsdlogger NOTICE ${CBSD_APP}: processing git checkout: ${_branch} in ${dst}
		cd ${dst} && ${SCM} checkout ${_branch}
		${SCM} pull
	else
		echo "Clone error: no .git"
	fi
}

status_is_maintenance_soft()
{
	cbsdsqlrw local "UPDATE bsdsrc SET status='1' WHERE ver=\"${ver}\""
}

status_is_maintenance_hard()
{
	cbsdsqlrw local "UPDATE bsdsrc SET status='2' WHERE ver=\"${ver}\""

}

status_is_normal()
{
	cbsdsqlrw local "UPDATE bsdsrc SET status='0' WHERE ver=\"${ver}\""
}


### MAIN ###
# auto-detect for stable/release
strpos --str="${ver}" --search="."
pos=$?
if [ ${pos} -eq 0 ]; then
	stable=1
	ostable=1
else
	stable=0
	ostable=0
fi

. ${buildconf}
readconf buildworld.conf
. ${distdir}/universe.subr

init_distcc
init_notify
init_target_arch
init_srcdir
init_supported_arch
init_make_flags

set +e
. ${buildconf}
set -e

if [ -n "${dst}" ]; then
	dst="${srcdir}/src_${ver}/src"
else
	dst="${SRC_DIR}"
fi

cleanup_sources()
{
	local _incomplete=0
	local _rootdir

	[ -f ${LOCKFILE} ] && ${RM_CMD} -f ${LOCKFILE}

	# not SCM dir?
	if [ ! -d ${dst}/.svn -o ! -d ${dst}/.git ]; then
		_incomplete=1
	fi

	# even so Makefile exist?
	if [ -r "${dst}/Makefile" ]; then
		_incomplete=0
	fi

	if [ ${_incomplete} -eq 1 ]; then
		${RM_CMD} -rf ${dst}
		_rootdir=$( ${DIRNAME_CMD} ${dst} )
		unregister_src
		# try to remove empty parent dir
		${RMDIR_CMD} ${_rootdir} || true
		err 1 "No source code for ${ver}"
	fi

	# restore operability status
	status_is_normal
}

${ECHO} "${N1_COLOR}Platform: ${N2_COLOR}${platform}${N0_COLOR}"
LOCKFILE=${ftmpdir}/src_$( ${MD5_CMD} -qs ${dst} ).lock
makelock ${LOCKFILE}

[ ! -d "${dst}" ] && ${MKDIR_CMD} -p ${dst}

trap "cleanup_sources > /dev/null 2>&1" HUP INT ABRT BUS TERM EXIT
. ${distdir}/time.subr

case "${checkout_method}" in
	svn*)
		st_time=$( ${DATE_CMD} +%s )
		init_svn

		# conditional registration:
		init_scm_and_version
		register_src

		# CBSD QUEUE
		if [ "${mod_cbsd_queue_enabled}" = "YES" -a -z "${MOD_CBSD_QUEUE_DISABLED}" ]; then
			[ -n "${cbsd_srcup_queue_name}" ] && ${cbsd_queue_backend} cbsd_queue_name=${cbsd_srcup_queue_name} cmd=srcup id=src${ver} platform=${platform} ver=${ver} rev="-" date="-" stable="${stable}" status=1 || true
		fi

		if [ ! -f "${dst}/Makefile" ]; then
			status_is_maintenance_hard
		else
			status_is_maintenance_soft
		fi

		svn_checkout
		init_scm_and_version
		end_time=$( ${DATE_CMD} +%s )
		diff_time=$(( end_time - st_time ))
		diff_time=$( displaytime ${diff_time} )
		${ECHO} "${N1_COLOR}svn_checkout src done ${N2_COLOR}in ${diff_time}${N0_COLOR}"
		cbsdlogger NOTICE ${CBSD_APP}: svn_checkout src done in ${diff_time}. with errcode: ${_ret}
		;;
	git*)
		st_time=$( ${DATE_CMD} +%s )
		init_git

		# conditional registration:
		init_scm_and_version
		register_src

		if [ ! -f "${dst}/Makefile" ]; then
			status_is_maintenance_hard
		else
			status_is_maintenance_soft
		fi

		git_checkout
		init_scm_and_version

		end_time=$( ${DATE_CMD} +%s )
		diff_time=$(( end_time - st_time ))
		diff_time=$( displaytime ${diff_time} )
		${ECHO} "${N1_COLOR}git_checkout src done ${N2_COLOR}in ${diff_time}${N0_COLOR}"
		cbsdlogger NOTICE ${CBSD_APP}: svn_checkout src done in ${diff_time}. with errcode: ${_ret}
		;;
	*)
		err 1 "${ECHO}Unknown checkout method. Please specify it via: ${N2_COLOR}srcup.conf${N0_COLOR}"
esac

# todo: apply_cbsd_patch should be x11, not sign for global patch
if [ "${apply_cbsd_patch}" = "1" ]; then
	/usr/local/bin/cbsd srcpatch $*
elif [ "${apply_cbsd_9p_patch}" = "1" ]; then
	/usr/local/bin/cbsd srcpatch $*
elif [ "${apply_cbsd_vesa_fb}" = "1" ]; then
	/usr/local/bin/cbsd srcpatch $*
fi

register_src

# CBSD QUEUE
if [ "${mod_cbsd_queue_enabled}" = "YES" -a -z "${MOD_CBSD_QUEUE_DISABLED}" ]; then
	[ -n "${cbsd_srcup_queue_name}" ] && ${cbsd_queue_backend} cbsd_queue_name=${cbsd_srcup_queue_name} cmd=update id=src${ver} platform=${platform} ver=${ver} rev="${SCM_REV}" date="${date}" stable="${stable}" status=1 || true
	[ -n "${cbsd_srcup_queue_name}" ] && ${cbsd_queue_backend} cbsd_queue_name=${cbsd_srcup_queue_name} cmd=srcup id=src${ver} status=2 || true
fi

status_is_normal
