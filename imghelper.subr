if [ ! "$_CBSD_IMGHELPER_SUBR" ]; then
_CBSD_IMGHELPER_SUBR=1
###

# Compare imghelper_version with forms version
check_version()
{
	local forms_version=

	forms_version=$( cbsdsqlro ${formfile} SELECT version FROM system 2>/dev/null )

	[ -z "${forms_version}" ] && err 1 "${N1_COLOR}Unsupported image schema: version is empty${N0_COLOR}"
	[ -z "${imghelper_version}" ] && err 1 "${N1_COLOR}Unsupported image schema: imghelper is empty${N0_COLOR}"

	[ ${forms_version} -gt ${imghelper_version} ] && err 1 "${N1_COLOR}Unsupported image schema. Image/Forms version is: ${N2_COLOR}${imghelper_version}/${forms_version}${N1_COLOR}. Please update CBSD first${N0_COLOR}"

	return 0
}

init_title()
{
	forms_title=
	forms_title=$( cbsdsqlro ${formfile} SELECT title FROM system 2>/dev/null )
	return 0
}


# if all_filled; then
#    echo "ALL FILLED"
# fi
all_filled()
{
	local i _T

	for i in ${param}; do
		case "${i}" in
			-*)
				continue
				;;
			Expand)
				continue
				;;
		esac
		eval _T=\${${i}}
		eval mandatory=\$${i}_mandatory
		if [ -z "${_T}" -a "${mandatory}" = "1" ]; then
			printf "${i}"
			return 1
		fi
	done

	return 0
}

# $1 - specify field to update, default is 'new' column
update_params()
{
	local i _T _imgformfile
	local _target="new" _link id

	[ -n "${1}" ] && _target="${1}"

	[ ! -d "${jailsysdir}/${jname}/helpers" ] && ${MKDIR_CMD} -p ${jailsysdir}/${jname}/helpers

	_imgformfile="${jailsysdir}/${jname}/helpers/${helpername}.sqlite"

	[ "${cfg_existing}" != "1" ] && ${CP_CMD} -aH ${formfile} ${_imgformfile}

	for i in ${param}; do
		case "${i}" in
			-*)
				continue
				;;
#			Expand)
#				continue
#				;;
		esac
		eval _T=\${${i}}

		if [ "${_T}" = "*****" ]; then
			eval _T=\$${i}_password
		fi

		[ -z "${_T}" ] && continue

		unset _link
		eval _link=\$${i}_link

		# deplace text value by id if linked field
		if [ -n "${_link}" ]; then
			unset txt id
			id="$( cbsdsqlro ${formfile} SELECT id FROM ${_link} WHERE text=\"${_T}\" )"

#			txt="$( cbsdsqlro ${formfile} SELECT txt FROM ${_link} WHERE text=\"${_T}\" )"

#			[ -n "${txt}" ] && _T="${txt}"

#			echo "I $id, T: $txt"
#			read p
			# it is bad construction for input box, eg:
			# disk_select in installed: 'ada0'  - found id
			# 'ada0 ada' - not found
			# [ -n "${id}" ] && _T="${id}"
		fi

		${miscdir}/sqlcli ${_imgformfile} UPDATE forms SET ${_target}=\"${_T}\" WHERE param=\"${i}\"

		# cleanup new
		[ "${_target}" != "new" ] && ${miscdir}/sqlcli ${_imgformfile} UPDATE forms SET new=\"\" WHERE param=\"${i}\"
	done

	echo "${helpername} formfile for ${jname}: updated"

	return 0

}

# $formfile and $table must be present
load_forms()
{
	local param _id def def2 link type _env idx lnk _vars
	local _tmpfile

	[ ! -f ${formfile} ] && err 1 "${N1_COLOR}formfile not found: ${N2_COLOR}${formfile}${N0_COLOR}"
	[ -z "${table}" ] && table="forms"

	idx=0

	param="$( cbsdsqlro ${formfile} SELECT param FROM ${table} | ${XARGS_CMD} )"

#	eval $( cbsdsqlro ${formfile} SELECT param,mytable FROM ${table} WHERE type != \"subtable\" ORDER BY order_id | while read _x; do
#		idx=$(( idx + 1 ))
#		unset _param _mytable
#		sqllist "${_x}" _param _mytable
#		echo "param${idx}=\"${_param}\""
#		echo "table${idx}=\"${_mytable}\""
#	done )

	helpername=$( cbsdsqlro ${formfile} SELECT helpername FROM system )
	packages=$( cbsdsqlro ${formfile} SELECT packages FROM system )
	have_restart=$( cbsdsqlro ${formfile} SELECT have_restart FROM system )

	[ "${have_restart}" = "0" ] && unset have_restart

	[ "${packages}" = "0" ] && packages=

	# First SQL sequence is 1
	_id=0
	_seq_ind=0

	_tmpfile="/dev/stdout"			# default
	_tmpfile=$( ${MKTEMP_CMD} )		# for debuf

	# export params_<ind> variables by sequence, not SQL index
	for i in ${param}; do
		_seq_ind=$(( _seq_ind + 1 ))
		unset _env desc _res cur attr xattr mandatory groupname group_id
		_id="$( cbsdsqlro ${formfile} SELECT idx FROM ${table} WHERE param=\"${i}\" LIMIT 1 )"
		desc="$( cbsdsqlro ${formfile} SELECT desc FROM ${table} WHERE idx=\"${_id}\" | ${TR_CMD} -d "'\"")"

		is_delimer=0
		is_hiddendelim=0
		is_subtable=0
		is_value=0
		_res=

		unset type
		type="$( cbsdsqlro ${formfile} SELECT type FROM ${table} WHERE idx=\"${_id}\" )"

		# check for special type or its value
		case "${type}" in
			hiddendelim)
				is_hiddendelim=1
				;;
			subtable)
				is_subtable=1
				;;
			delimer)
				is_delimer=1
				is_value=0
				_vars="forms_delimer_${_seq_ind}"
				#_vars="forms_delimer_${_seq_ind}"
				;;
			group_add|group_del)
				is_value=1
				is_delimier=1
				#_vars="forms_group_add_${_seq_ind}"
				#_vars="forms_delimer_${_seq_ind}"
				#unset _vars
				_vars="forms_groupadd_${_seq_ind}"
				_vars="${i}"
				;;
			*)
				is_value=1
				;;
		esac

		# check for H_environment
		if [ ${is_value} -eq 1 ]; then
			eval _res="\$H_${_vars}"
			_vars="${i}"
		else
			#
		fi

		[ -z "${_vars}" ] && continue

#		echo " >>> ${_vars} is value: ${is_value}, IDX = ${_id}, TYPE: ${type}, DESC: [${desc}], RES: ${_res}" >> /tmp/forms.txt

		if [ -n "${_res}" ]; then
			# environment is preferred
			echo "${_vars}=\"${_res}\"" >> ${_tmpfile}
#			echo "${_vars}=\"${_res}\"" >> /tmp/forms.txt

		elif [ ${is_value} -eq 1 ]; then
			# preferred for cur value
			cur="$( cbsdsqlro ${formfile} SELECT cur FROM ${table} WHERE idx=\"${_id}\" )"

			if [ -n "${cur}" ]; then
				def="${cur}"
			else
				def="$( cbsdsqlro ${formfile} SELECT def FROM ${table} WHERE idx=\"${_id}\" )"
			fi

			unset link
			link="$( cbsdsqlro ${formfile} SELECT link FROM ${table} WHERE idx=\"${_id}\" )"

			if [ -n "${link}" ]; then
				def2="$( cbsdsqlro ${formfile} SELECT text FROM ${link} WHERE id=\"${def}\" )"
				if [ -n "${def2}" ]; then
					descr="${desc}. Text value for ID ${def}: ${def2}"
					def="${def2}"
				fi
			fi
			echo "${_vars}=\"${def}\""  >> ${_tmpfile}
#			echo "${_vars}=\"${def}\"" >> /tmp/forms.txt
		elif [ ${is_delimer} -eq 1 ]; then
			echo "${_vars}=\"${_vars}\"" >> ${_tmpfile}
#			echo "${_vars}=\"${_vars}\"" >> /tmp/forms.txt
		fi

		# todo: rewrite to sqllist
		attr="$( cbsdsqlro ${formfile} SELECT attr FROM ${table} WHERE idx=\"${_id}\" )"
		xattr="$( cbsdsqlro ${formfile} SELECT xattr FROM ${table} WHERE idx=\"${_id}\" )"
		mandatory="$( cbsdsqlro ${formfile} SELECT mandatory FROM ${table} WHERE idx=\"${_id}\" )"
		groupname="$( cbsdsqlro ${formfile} SELECT groupname FROM ${table} WHERE idx=\"${_id}\" )"
		group_id="$( cbsdsqlro ${formfile} SELECT group_id FROM ${table} WHERE idx=\"${_id}\" )"

${CAT_CMD} >> ${_tmpfile} <<EOF
${_vars}_desc="${desc}"
${_vars}_mandatory="${mandatory}"
${_vars}_link="${link}"
${_vars}_type="${type}"
${_vars}_attr="${attr}"
${_vars}_groupname="${groupname}"
${_vars}_group_id="${group_id}"
EOF
#${CAT_CMD} >> /tmp/forms.txt <<EOF
#${_vars}_desc="${desc}"
#${_vars}_mandatory="${mandatory}"
#${_vars}_link="${link}"
#${_vars}_type="${type}"
#${_vars}_attr="${attr}"
#${_vars}_groupname="${groupname}"
#${_vars}_group_id="${group_id}"
	done

	. ${_tmpfile}
	${RM_CMD} -f ${_tmpfile}
}

# $formfile and $table must be present
load_new()
{
	[ ! -f ${formfile} ] && err 1 "${N1_COLOR}formfile not found: ${N2_COLOR}${formfile}${N0_COLOR}"
	[ -z "${table}" ] && table="forms"

	local param
	param=$( cbsdsqlro ${formfile} SELECT param FROM ${table} ORDER BY CAST\(order_id AS int\) | ${XARGS_CMD} )
	local _env

	eval $( for i in ${param}; do
		case "${i}" in
			-*)
				continue
				;;
#			Expand)
#				continue
#				;;
		esac
		unset _env new
		new="$( cbsdsqlro ${formfile} SELECT new FROM ${table} WHERE param=\"${i}\" )"
		[ -z "${new}" ] && continue
		echo "${i}=\"${new}\""
	done )
}

###
fi
